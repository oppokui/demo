<DashboardPluginModel description="" name="VIAOps - Signal Onboarding Deployment Service V2" is_init="false">
  <ModelInfo validated="true">
    <Properties>
    </Properties>
    <Widgets>
      <Widget name="DataSourceWidget" private="false">
        <PropertyText>
          <![CDATA[[]]]>
        </PropertyText>
        <CodeText segment="#methods">
          <![CDATA[        
        _sourceTypeOptions: [{ label: "HDFS", value: "hdfs" }, { label: "Kafka", value: "kafka" }],
        _buildDataSourceTypeSelet: function() {
            var model = this._model;
            var type = model != null && model["type"] ? model["type"] : "hdfs";
            AppUtil.removeAllChildrenOf(this._dataSourceTypeContainer);

            var leftPart = domConstruct.create("div", {
                'class': 'horizontal-flex config-item-left-part',
                'innerHTML': 'Source Type:'
            });
            this._dataSourceTypeContainer.appendChild(leftPart);

            var rightPart = domConstruct.create("div", {
                'class': 'horizontal-flex config-item-right-part'
            });
            this._dataSourceTypeContainer.appendChild(rightPart);
            this._dataSourceType = FormUtil.createSingleSelect("sourceTypeSelect", rightPart, this._sourceTypeOptions, type, null, null, lang.hitch(this, "_onChangeDataSourceType"));
        },
        
        _buildLayout: function() {
            this._buildDataSourceTypeSelet();

            this._buildHDFSView();
            this._buildKafkaView();
        },

        _buildHDFSView: function() {
            AppUtil.removeAllChildrenOf(this._hdfsView);
            var row = domConstruct.create("div", {
                'class': 'data-source-config-item horizontal-flex'
            });
            this._hdfsView.appendChild(row);

            var leftPart = domConstruct.create("div", {
                'class': 'horizontal-flex config-item-left-part',
                'innerHTML': 'Source Path:'
            });
            row.appendChild(leftPart);

            var rightPart = domConstruct.create("div", {
                'class': 'horizontal-flex config-item-right-part'
            });
            row.appendChild(rightPart);
            this._hdfsPath = FormUtil.createTextBox("hdfsPathInput", rightPart, "", null, "", false, lang.hitch(this, "_onChange"));

            row = domConstruct.create("div", {
                'class': 'data-source-config-item horizontal-flex'
            });
            this._hdfsView.appendChild(row);

            var leftPart = domConstruct.create("div", {
                'class': 'horizontal-flex config-item-left-part',
                'innerHTML': 'File Filter:'
            });
            row.appendChild(leftPart);

            var rightPart = domConstruct.create("div", {
                'class': 'horizontal-flex config-item-right-part'
            });
            row.appendChild(rightPart);
            this._fileFilter = FormUtil.createTextBox("fileFilterInput", rightPart, "", null, "", false, lang.hitch(this, "_onChange"));
        },
        
        _buildKafkaView: function() {
            AppUtil.removeAllChildrenOf(this._kafkaServersContainer);
            var div = domConstruct.create("div", {
                'class': 'horizontal-flex kafka-server-config-item-title',
                'innerHTML': 'BootStrap Servers(broker list delimited by comma):'
            });
            this._kafkaServersContainer.appendChild(div);

            div = domConstruct.create("div", {
                'class': 'horizontal-flex kafka-server-config-item-text'
            });
            this._kafkaServersContainer.appendChild(div);
            this._kafkaServers = FormUtil.createTextArea("kafkaServersInput", div, "", null, false, "server1:port,server2:port", lang.hitch(this, "_onChange"));

            AppUtil.removeAllChildrenOf(this._kafkaTopicsContainer);
            div = domConstruct.create("div", {
                'class': 'horizontal-flex kafka-server-config-item-title',
                'innerHTML': 'Topics(Topic list delimited by comma):'
            });
            this._kafkaTopicsContainer.appendChild(div);

            div = domConstruct.create("div", {
                'class': 'horizontal-flex kafka-server-config-item-text'
            });
            this._kafkaTopicsContainer.appendChild(div);
            this._kafkaTopics = FormUtil.createTextArea("kafkaTopicsInput", div, "", null, false, "topicA,topicB", lang.hitch(this, "_onChange"));

            // this._buildKfkaConfigItemsHeader();
        },

        _onChangeDataSourceType: function() {
            var selectedType = this._dataSourceType.get("value");
            domStyle.set(this._hdfsView, { display: selectedType == "hdfs" ? "" : "none" });
            domStyle.set(this._kafkaView, { display: selectedType == "kafka" ? "" : "none" });
            this._onChange();
        },

        _onChange: function() {
            if (this._changeCallback) {
                this._changeCallback();
            }
        },

        setModel: function(model) {
            this._model = model;
            this._buildDataSourceTypeSelet();
            if (model != null) {
                domStyle.set(this._hdfsView, { display: model["type"] == "hdfs" ? "" : "none" });
                domStyle.set(this._kafkaView, { display: model["type"] == "kafka" ? "" : "none" });
                switch (model["type"]) {
                    case "hdfs":
                        this._setHDFSModel(model);
                        break;
                    case "kafka":
                        this._setKafkaModel(model);
                        break;
                }
            } else {
                domStyle.set(this._hdfsView, { display: "" });
                domStyle.set(this._kafkaView, { display: "none" });
            }
        },

        _setHDFSModel: function(model) {
            this._hdfsPath.set("value", model["config"]["path"], false);
            this._fileFilter.set("value", model["config"]["filter"], false);
        },

        _setKafkaModel: function(model) {
            this._kafkaServers.set("value", model["config"]["servers"], false);
            this._kafkaTopics.set("value", model["config"]["topics"], false);

            this._kafkaProperties = model["config"]["properties"] || [];
            this._buildKfkaConfigItems();
        },

        getModel: function() {
            var selectedType = this._dataSourceType.get("value");
            switch (selectedType) {
                case "hdfs":
                    return this._getHDFSModel();
                case "kafka":
                    return this._getKafkaModel();
            }
        },

        _getHDFSModel: function() {
            var model = this._model;
            model.type = "hdfs";
            model.config.path = this._hdfsPath.get("value");
            model.config.filter = this._fileFilter.get("value");
            return model;
        },

        _getKafkaModel: function() {
            var model = this._model;
            model.type = "kafka";
            model.config.servers = this._kafkaServers.get("value");
            model.config.topics = this._kafkaTopics.get("value");
            return model;
        },

        _onAddConfigItemClick: function(evt) {
            var self = this;
            var item = {};
            this._kafkaProperties.push(item);
            this._buildKfkaConfigItem(item);
        },

        _onConfigItemDelete: function(item) {
            this._kafkaProperties.splice(this._kafkaProperties.indexOf(item), 1);
            this._configItemContainer.removeChild(item.__div__);
        },

        _buildKfkaConfigItemsHeader: function() {
            this._buildTextItem('kafka-config-header-item', 'Key', this._configItemContainerHeader);
            this._buildTextItem('kafka-config-header-item', '', this._configItemContainerHeader);
            this._buildTextItem('kafka-config-header-item', 'Value', this._configItemContainerHeader);
            this._buildIconItem('kafka-config-header-item', 'fas fa-plus-circle', lang.hitch(this, "_onAddConfigItemClick"), this._configItemContainerHeader);
        },

        _buildKfkaConfigItems: function() {
            var self = this;
            this._kafkaProperties.forEach(function(item) {
                self._buildKfkaConfigItem(item);
            });
        },

        _buildKfkaConfigItem: function(item) {
            var self = this;
            var div = domConstruct.create("div", {
                'class': 'horizontal-flex kafka-config-item-row'
            });
            this._configItemContainer.appendChild(div);
            item.__div__ = div;

            item.__key_textinput__ = this._buildTextInputItem('kafka-config-widget-item', item.key, false, function(value) {
                item.key = value.value;
            }, div);
            this._buildIconItem('kafka-config-widget-item', 'fas fa-angle-double-right', null, div);
            item.__value_textinput__ = this._buildTextInputItem('kafka-config-widget-item', item.value, false, function(value) {
                item.value = value.value;
            }, div);
            item.__delete__ = this._buildIconItem('kafka-config-widget-item', 'fas fa-times-circle', function() {
                self._onConfigItemDelete(item);
            }, div);
        },

        _buildTextInputItem: function(className, text, disable, onChange, parent) {
            var div = domConstruct.create("div", {
                'class': 'horizontal-flex ' + className
            });
            parent.appendChild(div);

            return FormUtil.createTextBox('', div, text, null, null, disable, onChange);
        },

        _buildTextItem: function(className, text, parent) {
            var div = domConstruct.create("div", {
                'class': 'horizontal-flex ' + className,
                'innerHTML': text
            });

            parent.appendChild(div);
        },

        _buildIconItem: function(className, iconClass, onAction, parent) {
            var div = domConstruct.create("div", {
                'class': 'horizontal-flex ' + className
            });
            parent.appendChild(div);

            var i = domConstruct.create("i", {
                'class': iconClass
            });
            div.appendChild(i);

            if (onAction) {
                $(div).click(function() {
                    onAction();
                });
            }
        }]]>
        </CodeText>
        <CodeText segment="#constructor">
          <![CDATA[            this._model = config.model;
            this._kafkaProperties = [];
            this._changeCallback = config.onChange;]]>
        </CodeText>
        <CodeText segment="#postCreate">
          <![CDATA[            this.setModel(this._model);]]>
        </CodeText>
        <CodeText segment="#destroy">
          <![CDATA[            if (this._dataSourceType) {
                this._dataSourceType.destroy();
                this._dataSourceType = null;
            }
            if (this._hdfsPath) {
                this._hdfsPath.destroy();
                this._hdfsPath = null;
            }
            if (this._kafkaServers) {
                this._kafkaServers.destroy();
                this._kafkaServers = null;
            }
            if (this._kafkaTopics) {
                this._kafkaTopics.destroy();
                this._kafkaTopics = null;
            }]]>
        </CodeText>
        <CodeText segment="#buildRendering">
          <![CDATA[            
            this._buildLayout();]]>
        </CodeText>
        <HtmlText>
          <![CDATA[<div class="vertical-flex data-source-widget">
    <style>
        .horizontal-flex {
            display: flex;
            flex-direction: row;
            justify-content: center;
            align-items: center;
            box-sizing: border-box;
        }
        
        .vertical-flex {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-content: center;
            box-sizing: border-box;
        }
        
        .data-source-widget {
            width: 100%;
            height: 100%;
            box-sizing: border-box;
            justify-content: flex-start;
        }
        
        .data-source-widget-warp {
            width: 100%;
            max-width: 750px;
            height: 100%;
            justify-content: flex-start;
            padding-left: 10px;
            padding-top: 10px;
        }
        
        .data-source-type-container {
            width: 100%;
            height: 30px;
            justify-content: flex-start;
        }
        
        .data-source-view {
            width: 100%;
            height: calc(100% - 30px);
            justify-content: flex-start;
        }
        
        .config-item-container,
        .data-source-config-item {
            height: 30px;
            width: 100%;
            box-sizing: border-box;
        }
        
        .data-source-config-item .config-item-left-part,
        .data-source-type-container .config-item-left-part {
            height: 100%;
            width: 110px;
            padding-right: 10px;
            justify-content: flex-end;
        }
        
        .data-source-config-item .config-item-right-part,
        .data-source-type-container .config-item-right-part {
            height: 100%;
            width: calc(100% - 110px);
            justify-content: flex-start;
        }
        
        .kafka-server-config-item {
            width: 100%;
            height: 95px;
            justify-content: flex-start;
        }
        
        .kafka-server-config-item .kafka-server-config-item-title {
            width: 100%;
            height: 30px;
            justify-content: flex-start;
            align-items: flex-end;
        }
        
        .kafka-server-config-item .kafka-server-config-item-text {
            width: 100%;
            height: calc(100% - 30px);
            justify-content: flex-start;
            align-items: flex-start;
        }
        
        .kafka-server-config-item .kafka-server-config-item-text .textarea {
            width: 100%;
            height: 100%;
        }
        
        .kafka-conditions-container {
            width: 100%;
            height: calc(100% - 200px);
            justify-content: flex-start;
        }
        
        .kafka-conditions-container-header {
            width: 100%;
            height: 40px;
            padding-top: 10px;
            justify-content: flex-start;
        }
        
        .kafka-conditions-container-body {
            width: 100%;
            height: calc(100% - 40px);
            justify-content: flex-start;
        }
        
        .kafka-config-item-header {
            width: 100%;
            height: 30px;
            justify-content: space-between;
            border-bottom: 1px solid #CCCCCC;
        }
        
        .kafka-config-item-container {
            width: 100%;
            height: calc(100% - 30px);
            justify-content: flex-start;
        }
        
        .kafka-config-item-header .kafka-config-header-item {
            padding-left: 5px;
            width: calc(50% - 20px);
            height: 100%;
            justify-content: flex-start;
        }
        
        .kafka-config-item-header .kafka-config-header-item:nth-child(2) {
            justify-content: center;
            width: 20px;
        }
        
        .kafka-config-item-header .kafka-config-header-item:nth-child(4) {
            justify-content: flex-start;
            width: 20px;
        }
        
        .kafka-config-item-row {
            width: 100%;
            height: 25px;
        }
        
        .kafka-config-item-row .kafka-config-widget-item {
            padding-left: 5px;
            width: calc(50% - 20px);
            height: 100%;
            justify-content: flex-start;
        }
        
        .kafka-config-item-row .kafka-config-widget-item:nth-child(2) {
            justify-content: center;
            width: 20px;
        }
        
        .kafka-config-item-row .kafka-config-widget-item:nth-child(4) {
            justify-content: flex-start;
            width: 20px;
        }
        
        .config-item-widget {
            display: flex;
            flex-direction: row;
            align-items: center;
            height: 30px;
            padding-left: 10px;
        }
        
        .config-item-widget span {
            display: inline-block;
            text-align: center;
            width: 48px;
        }
        
        .config-item-widget .dijitTextBox {
            font-family: monospace;
            width: 200px;
            height: 25px;
        }
        
        .config-item-widget i {
            margin-left: 10px;
        }
    </style>
    <div class="data-source-widget-warp vertical-flex">
        <div data-dojo-attach-point="_dataSourceTypeContainer" class="data-source-type-container horizontal-flex">
        </div>
        <div data-dojo-attach-point="_hdfsView" class="vertical-flex data-source-view">
        </div>
        <div data-dojo-attach-point="_kafkaView" class="vertical-flex data-source-view">
            <div data-dojo-attach-point="_kafkaServersContainer" class="vertical-flex kafka-server-config-item">
            </div>
            <div data-dojo-attach-point="_kafkaTopicsContainer" class="vertical-flex kafka-server-config-item">
            </div>
            <div class="vertical-flex kafka-conditions-container" style="display: none">
                <div class="kafka-conditions-container-header horizontal-flex">
                    Additional Configurations
                </div>
                <div class="kafka-conditions-container-body vertical-flex">
                    <div data-dojo-attach-point="_configItemContainerHeader" class="kafka-config-item-header horizontal-flex">
                    </div>
                    <div data-dojo-attach-point="_configItemContainer" class="vertical-flex kafka-config-item-container">
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
]]>
        </HtmlText>
      </Widget>
      <Widget name="DeploymentProfileConfigWidget" private="false">
        <PropertyText>
          <![CDATA[[]]]>
        </PropertyText>
        <CodeText segment="#buildRendering">
          <![CDATA[            this.parent = document.createElement('div');
            this.domNode.append(this.parent);
            this.setModel(this.model);
            ]]>
        </CodeText>
        <CodeText segment="#functions">
          <![CDATA[    function addIndexAttribute(arr)
    {
        if (arr != null) {
            for (var i=0; i<arr.length; i++) {
                arr[i]["_id"] = String(i);
            }
        }
    }
    
    function _build(parent, data, PropertyControlUtil, onChange, controlTypes){
        var me = this;
        var params = {
            columns: [],
            selectionMode : "none",
            showHeader : true,
            "class": "noBorder",
            "style": "height:129px;"
        };
        params.columns.push(_getNameColumn("name", "Name/Label", 70));
        params.columns.push(_getTextColumn("defaultLabel", "Default Value", 70));

        params.columns.push(_getOverrideColumn());
        params.columns.push(_getValueColumn(70, false, null, null, "property"));

        var store = GridUtil.createGridStore("_id", data);
        var grid = GridUtil.createGridWidget("config", parent, true, null, params.columns, store,
                                             null, null, "none", null, { className : 'dgrid-autoheight' });
        return {
            grid : grid,
            store : store
        };
        
        function _getNameColumn(name, label, pct, className){
            return {
                label: label,
                field: name,
                //autoSave: true,
                sortable: true,
                className: className?className:"inputAttr",
                style: "width:"+pct+"%",
                renderCell: function(object, value, node, options) {
                    drawLabelColumn(object, value, name, node, !object.custom);
                }
            };
        }
        
        function _getTextColumn(name, label, pct, className) {
            return {
                label: label,
                field: name,
                //autoSave: true,
                sortable: true,
                className: className?className:"inputAttr",
                style: "width:"+pct+"%",
                renderCell: function(object, value, node, options) {
                    drawLabelColumn(object, value, name, node, true);
                }
            };
        }
        
        function drawLabelColumn(obj, value, field, node, disabled) {
            var info = {value: value == null ? "" : value, title: value, disabled: disabled, style: ""};
            domStyle.set(node, {title: value});
            var label = domConstruct.create("input", info);
            node.appendChild(label);
            label.onchange = function(evt){
                valueChanged(obj, field)({
                    value : label.value
                });
            }
        }
        
        function _getOverrideColumn() {
            return {
                label: "",
                field: "override",
                //autoSave: true,
                sortable: true,
                style: "width:20px;",
                renderCell: function(object, value, node, options) {
                   drawCheckboxColumn(object, value, node, false, overrideChanged);
                }
            };
        }
        
        function drawCheckboxColumn(object, value, node, disabled, callback) {
            var checked = false;
            if(value != null) {
                checked = (value == true || value == "true");
            } else { // migration, if value is not empty, then has been overridden
                checked = (object.value != null);
            }
            var input = FormUtil.createCheckBox(name, node, checked, "Indicate whether to override the default value or not", function(change){
                callback(input, change);
            });
            input.setAttribute("_id", object._id);
            input.placeAt(node);
        }
        
        function _getValueColumn(pct, diabled, name, label, className) {
            return {
                label: "Override Value",
                field: name || "value",
                //autoSave: true,
                sortable: true,
                style: "width:"+pct+"%",
                className: className?className:"inputAttr",
                renderCell: function(object, value, node, options) {
                   drawValueColumn(object, value, "value", node, me.globalPropMap, diabled);
                }
            };
        }
        
        function valueChanged(object, field){
            return function(evt){
                var oldValue = object[field];
                object[field] = evt.value;
                if(onChange) onChange(object.custom ? object.name : object._id, oldValue, evt.value);
            };
        }
        
        function drawBooleanColum(object, value, field, node) {
            var property = {label:object.label, name: object.id, value:value, type:"boolean", noInitialValue:true};
            var args = PropertyControlUtil.getPropertyConstraintArgs(property);
            var itemStyle = "width : 100%;";

            var controlObj = PropertyControlUtil.createPropertyControl(property, itemStyle, args, valueChanged(object, field), null, false);
            var propertyControlWidget = controlObj.widget;

            propertyControlWidget.placeAt(node);
        }
        
        function drawValueColumn(object, value, field, node, globalPropMap, disabled){
            var override = object.override =="true" || object.value != null;
            node.classList.toggle('overrideDeployProperty', override);
            AppUtil.removeAllChildrenOf(node);
            if(field == "value" && !object.custom) {
                if(!override) {
                    return;
                }
            }
            const controlType = controlTypes[object._id] ? controlTypes[object._id].type || 'extendType' : null ;
            switch(controlType || object.type){
                case 'datasourceValue' : return getDatasourceValues().then(drawSelectionProperty.bind(null, object, value, field, node));
                case 'datasource' : return getDatasources().then(drawSelectionProperty.bind(null, object, value, field, node));
                case 'table' : return getTables(object._id).then(drawSelectionProperty.bind(null, object, value, field, node));
                case 'integer' : return drawPropertyColumn(object, value, field, node, controlTypes[object._id] || { type : 'integer' });
                case 'number' : return drawNumberProperty(object, value, field, node);
                case 'boolean' : return drawBooleanColum(object, value, field, node);
                case 'date' : return drawDateProperty(object, value, field, node);
                case 'datetime' : return drawDatetimeProperty(object, value, field, node);
                case 'selection' : return drawSelectionProperty(object, value, field, node, controlTypes[object._id].args || [])
                default : return controlType ? drawPropertyColumn(object, value, field, node, controlTypes[object._id]) : drawInputColumn(object, value, field, node);
            }
            
            function getTables(rowId){
                return new Promise(function(resolve){
                    Plugin("VIA - Data Source Plugin").dbListDatabase(datasource(), function(response){
                        if (response.status == "OK") {
                            Plugin("VIA - Data Source Plugin").dbListTables(datasource(), response.value, function(response) {
                                if(response.status == "OK"){
                                    resolve(response.value.map( i => ({ label : i.name, value : JSON.stringify(i)})));
                                }
                            });
                        }
                    });                    
                });

                function datasource(){
                    let datasource = null;
                    for(let row of store.fetchSync()){
                        if(row.type === 'datasourceValue') 
                            datasource = row;
                        if(row._id === rowId) break;
                    }
                    return datasource.value || datasource.defaultValue;
                }
            }
            
            function getDatasources(){
                return new Promise(function(resolve){
                    Plugin("VIA - Data Source Plugin").dsListDataSources(function(result){
                        resolve(result.value.map(makeOption));
                    })    
                });
                function makeOption(ds){
                    return {
                        label : ds.name,
                        value : ds.jndiName
                    }
                }
            }
            
            function getDatasourceValues(){
                return new Promise(function(resolve){
                    Plugin("VIA - Data Source Plugin").dsListDataSources(function(result){
                        resolve(result.value.map(makeOption));
                    })    
                });
                
                function makeOption(ds){
                    return {
                        label : ds.name,
                        value : JSON.stringify(ds)
                    }
                }
            }
        }
        
        function drawInputColumn(obj, value, field, node, placeHolder) {
            var info = {value: value?value:"", title: value, placeholder:placeHolder || "", style:"width:calc(100% - 1.3em); height:100%;"};
            var input = domConstruct.create("input", info);
            input.onchange = function(evt){
                valueChanged(obj, field)({
                    value : input.value
                });
            };
            node.appendChild(input);
            if(obj.custom){
                node.insertAdjacentHTML('beforeend','<i class="fas fa-times-circle deleteDeployProp"></i>');
                input.classList.add('customDeployPropertyInput');
            }
        }
        
        function drawPropertyColumn(object, value, field, node, controlType){
            var property = {"*":{desc:"desc", label:"label"}, label:object.label, type:"string", needPlaceholder: true,
                     name: object.id, value:value};
            
            property = Object.assign(property, controlType);
            property._defaultValue = value;
            property.value = value;
            property.disabled = false;
            var itemStyle = "width : 100%;";
            var args = property.args || property.constraints && property.constraints.args || {}; 
            var controlObj = PropertyControlUtil.createPropertyControl(property, itemStyle, args, valueChanged(object, field), null, false);
            var propertyControlWidget = controlObj.widget;

            propertyControlWidget.placeAt(node);
        }
        
        function drawSelectionProperty(object, value, field, node, enums){
            var property = {"*":{desc:"desc", label:"label"}, label:object.label, type:"string", needPlaceholder: true,
                    enums:enums, name: object.id, value:value};

            property._defaultValue = value;
            property.value = value;
            property.disabled = false;
            var args = PropertyControlUtil.getPropertyConstraintArgs(property);
            var itemStyle = "width : 100%;";

            var controlObj = PropertyControlUtil.createPropertyControl(property, itemStyle, args, valueChanged(object, field), null, false);
            var propertyControlWidget = controlObj.widget;

            propertyControlWidget.placeAt(node);
        }
        
        function drawNumberProperty(object, value, field, node, constraints){
            var property = {
                label:object.label, 
                type:"number", 
                name: object._id, 
                value:value,
                constraints: constraints
                };

            property.disabled = false;
            var args = PropertyControlUtil.getPropertyConstraintArgs(property);
            var itemStyle = "width : 100%;";

            var controlObj = PropertyControlUtil.createPropertyControl(property, itemStyle, args, valueChanged(object, field), null, false);
            var propertyControlWidget = controlObj.widget;

            propertyControlWidget.placeAt(node);
        }
        
        function drawDatetimeProperty(object, value, field, node, constraints){
            var property = {
                label:object.label, 
                type:"datetime", 
                name: object._id, 
                value:value,
                constraints: constraints
                };

            property.disabled = false;
            var args = PropertyControlUtil.getPropertyConstraintArgs(property);
            var itemStyle = "width : 100%;";

            var controlObj = PropertyControlUtil.createPropertyControl(property, itemStyle, args, valueChanged(object, field), null, false);
            var propertyControlWidget = controlObj.widget;

            propertyControlWidget.placeAt(node);
        }
        
        function drawDateProperty(object, value, field, node, constraints){
            var property = {
                label:object.label, 
                type:"date", 
                name: object._id, 
                value:value,
                constraints: constraints
                };

            property.disabled = false;
            var args = PropertyControlUtil.getPropertyConstraintArgs(property);
            var itemStyle = "width : 100%;";

            var controlObj = PropertyControlUtil.createPropertyControl(property, itemStyle, args, valueChanged(object, field), null, false);
            var propertyControlWidget = controlObj.widget;

            propertyControlWidget.placeAt(node);
        }
        
        function overrideChanged(input, change) {
            var checked = change.value;
            var overrideTD = input.domNode.parentElement.nextElementSibling; //input.parentElement.nextElementSibling;
            var id = input["_id"];
            var object = store.getSync(id);
            if(!object) return; // unpredicted???
            object["override"] = checked + "";
            // todo: find the corresponding widget and cleanup/redraw
            if(checked) { // redraw
                object.value = object.defaultValue;
                if (object.value == null) {
                    object.value = "";
                } else if (typeof object.value == "boolean" || typeof object.value == "number") {
                    object.value = object.value + "";
                }
                drawValueColumn(object, object.value, "value", overrideTD, this.globalPropMap, this.disabled);
            } else { // cleanup
                var objectValue = object.value;
                delete object.value;
                if(onChange) onChange(object.id, objectValue, null);
                var item = dijit.byNode(overrideTD.firstElementChild);
                if(item) item.destroy();
                drawValueColumn(object, object.value, "value", overrideTD, this.globalPropMap, this.disabled);
            }
        }
    }]]>
        </CodeText>
        <CodeText segment="#methods">
          <![CDATA[        startup : function(){
            this._resizeObserver = new ResizeObserver(_resize.bind(this));
            this._resizeObserver.observe(this.domNode);
            
            function _resize(entries){
                if(entries[0].contentRect.width > 0 && entries[0].contentRect.height > 0) 
                    this.resize();
            }
        },
        
        setModel : function(model){
            AppUtil.removeAllChildrenOf(this.parent);
            this.model = model;
            
            var configurations = Object.keys(this.model).map(function(key){
                return {
                    name : key,
                    data : transform(this.model[key], this.convertValues || {}),
                    open : true
                };
            }, this);

            this._promise = this.build(this.parent, configurations, this.onChange);
            
            function transform(data, convertValues){
                return data.map(function(d){
                    return {
                        name : d.label,
                        defaultValue : defaultValue(d),
                        defaultLabel : defaultLabel(d),
                        override : d.override,
                        value : convertValues[d.type] ? convertValues[d.type](d.value) : d.value,
                        type : d.type,
                        _id : d.id,
                        custom : d.custom,
                        _originDefaultValue : d.defaultValue,
                        _originValue : d.value
                    }
                });
                
                function defaultValue(d){
                    return convertValues[d.type] ? convertValues[d.type](d.defaultValue) : d.defaultValue;
                }
                
                function defaultLabel(d){
                    if(convertValues[d.type]) return defaultValue(d);
                    if(d.type === 'datasourceValue' ) return JSON.parse(d.defaultValue).name;
                    if(d.type === 'table') return JSON.parse(d.defaultValue).name;
                    return defaultValue(d);
                }
            }
        },
        
        getModel : function(){
            var revertValues = this.revertValues || [];
            return this._configs().reduce(function(result, config){
                result[config.name] = config.data.map(transform);
                return result;
            }, {});  
            
            function transform(d){
                return {
                    label : d.name,
                    defaultValue : d._originDefaultValue,
                    override : d.override,
                    value : revertValues[d.type] ? revertValues[d.type](d.value, d._originValue, d._originDefaultValue) : d.value,
                    id : d.custom ? d.name : d._id,
                    type : d.type,
                    custom : d.custom
                };
            }
        },
        
        setCustom : function(name, custom){
            if(custom) this.enableCustom(name);
            else this.disableCustom(name);
            return this;
        },
        
        setHideTitle : function(hide){
            this.domNode.classList.toggle('hideTitle', !!hide);
            return this;
        },
        
        enableCustom : function(name){
            this._getDetails(name).then(function(details){
                details.classList.add('deployPropertyAddable');    
            });
        },
        
        disableCustom : function(name){
            this._getDetails(name).then(function(details){
                details.classList.remove('deployPropertyAddable'); 
            });
        },
        
        setTitle : function(name, title){
            this._getDetails(name).then(_setTitle);
            
            function _setTitle(details){
                details.querySelector('.deploymentGroupTitle').innerHTML = title;
            }
        },
        
        _getDetails : function(name){
            return this._promise.then(function(result){
                return search(result[name].grid.domNode);
            });
            
            function search(dom){
                if(dom.tagName === 'DETAILS') return dom;
                return search(dom.parentNode);
            }
        },
        
        _configs : function(){
            return Object.keys(this._result).map(function(config){
                return {
                    name : config,
                    data : this._result[config].store.fetchSync()
                }
            }, this);   
        },
        
        resize : function(){
            this._promise.then(function(result){
                Object.keys(result)
                      .map(function(key){ return result[key].grid; })
                      .forEach(function(grid){ grid.resize(); });
            });
        },
        
        build: function(parent, configurations, onChange) {
            var self = this;
            
            function onResolve(resolve) {
                require(["af/utils/PropertyControlUtil"], function(PropertyControlUtil) {
                    self._result = createDetails(PropertyControlUtil);
                    resolve(self._result);
                });
            }

            function createDetails(PropertyControlUtil) {
                return configurations.reduce(function(result, config) {
                    parent.insertAdjacentHTML('beforeend', detailsHtml(config));
                    result[config.name] = _build(currentDetails().querySelector('.configData'), config.data, PropertyControlUtil, onChange, self.controlTypes || {});
                    currentDetails().addEventListener('toggle', function(evt) {
                        if (evt.currentTarget.open) result[config.name].grid.resize();
                    });
                    currentDetails().querySelector('.addDeployProperty').addEventListener('click', function(evt){
                        evt.preventDefault();
                        result[config.name].store.addSync({
                            custom : true,
                            defaultValue : "",
                            defaultLabel : "",
                            name : "",
                            _id : generateRandomUuid()
                        });
                    });
                    currentDetails().addEventListener('click', function(evt){
                        if(evt.target.classList.contains('deleteDeployProp')){
                            var row = result[config.name].grid.row(evt.target);
                            result[config.name].store.removeSync(row.id);
                            onChange && onChange();
                        }
                    });
                    return result;
                }, {});
            }

            function currentDetails() {
                return parent.querySelector('details:last-child');
            }

            function detailsHtml(config) {
                return '<details' +
                    (config.open ? ' open' : '') +
                    ('><summary>') +
                    ('<span class="deploymentGroupTitle">') + config.name + ('</span>') +
                    ('<i class="fas fa-plus-circle addDeployProperty">') +
                    '</summary><div class="configData"></div></details>';
            }
            
            return new Promise(onResolve);
        },
        
        hide : function(){
            this.domNode.style.display = 'none';
            this.resize();
        },
        
        show : function(){
            this.domNode.style.removeProperty('display');
            this.resize();
        }]]>
        </CodeText>
        <CodeText segment="#constructor">
          <![CDATA[            this.model = this.initialConfig.model;
            this.onChange = this.initialConfig.onChange;
            this.convertValues = this.initialConfig.convertValues;
            this.revertValues = this.initialConfig.revertValues;
            this.controlTypes = this.initialConfig.controlTypes;
            
            Object.defineProperty(this, 'editable', {
                set : function(editable){ this.domNode.classList.toggle('readOnlyDeployment', !editable); },
                get : function(){ return this.domNode.classList.contains('readOnlyDeployment') }
            });]]>
        </CodeText>
        <CodeText segment="#destroy">
          <![CDATA[            if(this._reszieObserver) this._resizeObserver.disconnect();
            delete this._resizeObserver;
            delete this.onChange;
            delete this.initialConfig;
            delete this.convertValues;
            delete this.revertValues;]]>
        </CodeText>
        <HtmlText>
          <![CDATA[<div class='deploymentProfileConfigWidget' style="width:100%;height:100%;">
    <style>
        .deploymentProfileConfigWidget {
            overflow-y: auto;
        }
        
        .deploymentProfileConfigWidget details {
            border: 1px solid #aaa;
            padding: 10px;
        }
        
        .deploymentProfileConfigWidget .dgrid .dgrid-content .dgrid-cell.inputAttr input[disabled] {
            background-color: transparent;
            border: none;
            width: 100%;
        }
        
        .app .deploymentProfileConfigWidget .dgrid .dgrid-cell {
            background-color: transparent;
        }
        
        .app .deploymentProfileConfigWidget .dgrid .config-override {
            padding: 0;
        }
        
        .deploymentProfileConfigWidget summary {
            outline: none;
            font-size: 14px;
        }
        
        .readOnlyDeployment .dgrid::after{
            display : block;
            position : absolute;
            content : "";
            width : 100%;
            height : 100%;
            background-color : darkgray;
            opacity: 0.4;
            top:0;
            left:0;
        }
        
        .addDeployProperty{
            float : right;
            cursor : pointer; 
            display : none;
        }
        
        .deploymentProfileConfigWidget:not(.readOnlyDeployment) .deployPropertyAddable[open] .addDeployProperty{
            display : block;
        }
        
        .overrideDeployProperty .customDeployPropertyInput{
            visibility : visible;
        }
        
        .customDeployPropertyInput{
            visibility : hidden;
        }
        
        .deleteDeployProp{
            cursor : pointer;
        }
        
        .hideTitle summary::-webkit-details-marker{
            display : none;
        }
        
        .hideTitle .deploymentGroupTitle{
            display : none;
        }
    </style>
</div>
]]>
        </HtmlText>
      </Widget>
      <Widget name="DeploymentTabEditor" private="false">
        <PropertyText>
          <![CDATA[[]]]>
        </PropertyText>
        <CodeText segment="#constructor">
          <![CDATA[            this.tabClass = this.editorConfig.tabClass;
            this.vtWidth = this.editorConfig.vtWidth;
            this.vtHeight = this.editorConfig.vtHeight;
            this.convertValues = this.editorConfig.convertValues;
            this.revertValues = this.editorConfig.revertValues;
            this.model = this.initialConfig.model;
            this.items = Object.keys(this.model).map( k => ({ label : k, value : this.model[k] }) );
            this.customSettings = this.editorConfig.customSettings || {};
            this._selectIndex = this.editorConfig.selectTabIndex;
            this.controlTypes = this.editorConfig.controlTypes;]]>
        </CodeText>
        <CodeText segment="#postCreate">
          <![CDATA[]]>
        </CodeText>
        <CodeText segment="#buildRendering">
          <![CDATA[            this.tabWidget = new this.tabClass({
                controller : {},
                items  : this.items,
                selectedItemIndex: this._selectIndex,
                itemProperty : "label",
                onSelectItem : lang.hitch(this, "_onSelectItem"),
                editable : false,
                isTitleDisplay : false,
                navigate       : true,
                selectCallback : true,
                vtWidth : this.vtWidth,
                vtHeight : 25,
                defaultTabWidth : 160
            }, this.tabWidgetContainer);
            
            this._createTabsPromise = new Promise(resolve => this._createTabs(resolve));
            
            function convertDatasource(value) {
                return value && value.dataSource;
            }

            function revertDatasource(value, originValue, originDefaultValue) {
                if (value == null) return null;
                return Object.assign({}, originValue || originDefaultValue, {
                    dataSource: value
                });
            }]]>
        </CodeText>
        <CodeText segment="#methods">
          <![CDATA[        startup : function(){
            this.tabWidget.startup();
            this._createTabsPromise.then(() => this.tabs.forEach( t => t.startup() ));
        },
        
        _onSelectItem : function(selectItem, selectIndex){
            this._selectIndex = selectIndex;
            if(this.tabs){
                this.tabs.forEach( t => t.hide() );
                this.tabs[this._selectIndex || 0].show();
            }
        },
        
        getModel : function(){
            return this.tabs && this.tabs.reduce(merge, {});
            
            function merge(model, tab){
                return Object.assign(model, tab.getModel());
            }
        },
        
        _createTabs : function(resolve){
            Widget('DeploymentProfileConfigWidget', create.bind(this));
            
            function create(deployConfigClass){
                this.tabs = this.items.map( i => deployConfig.call(this, i) );
                this.tabs.forEach( t => t.hide() );
                this.tabs[this._selectIndex || 0].show();
                
                resolve();
                
                function deployConfig(item){
                    const config = {
                        model : { [item.label] : item.value },
                        onchange : this.onChange,
                        convertValues: this.convertValues[item.label],
                        revertValues: this.revertValues[item.label],
                        controlTypes: this.controlTypes
                    };
                    return new deployConfigClass(config, newContainer.call(this))
                        .setCustom(item.label, this.customSettings[item.label])
                        .setHideTitle(true);
                }
                
                function newContainer(){
                    return this.domNode.appendChild(document.createElement('div'));
                }
            }
        },
        
        resize : function(){
        }
]]>
        </CodeText>
        <CodeText segment="#destroy">
          <![CDATA[            if(this.tabs) this.tabs.forEach( t => t.destroy() );
            delete this.tabs;
            this.tabWidget.destroy();
            delete this.tabWidget;]]>
        </CodeText>
        <CodeText segment="#updateWidthAndHeight">
          <![CDATA[            ]]>
        </CodeText>
        <HtmlText>
          <![CDATA[<div class="deploymentTabEditor" style="width:100%;height:100%;">
    <style>
        .deploymentTabEditor{
            display : flex;
            flex-direction : column;
            background-color : white;
        }
        .deploymentTabEditor .tabWidgetContainer{
            flex : 0 0 auto;
        }
        
    </style>
    <div data-dojo-attach-point="tabWidgetContainer" class="tabWidgetContainer" />
</div>
]]>
        </HtmlText>
      </Widget>
      <Widget name="WorkbenchDeployManagerWidget" private="false">
        <PropertyText>
          <![CDATA[[]]]>
        </PropertyText>
        <CodeText segment="#constructor">
          <![CDATA[            
            this._plugin = Plugin();
            this._commonPlugin = Plugin("VIA - Common");
            this._datasourcePlugin = Plugin("VIA - Data Source Plugin");]]>
        </CodeText>
        <CodeText segment="#onNotify">
          <![CDATA[            if (evt.NuovaStella != null) {
                this._plugin = evt.NuovaStella;
                console.debug("##### Nuova Stella plugin: " + this._plugin["$uri"]);
            }

            if (evt.CommonPlugin != null) {
                this._commonPlugin = evt.CommonPlugin;
                console.debug("##### Common plugin: " + this._commonPlugin["$uri"]);
            }

            var self = this;
            switch (evt.action) {
                case 'load':
                    self._dirty = false;
                    self._project = evt.project;
                    
                    self._dirty = false;
                    self.controller.appController.clearDirty(dirtyKey);
                    self._buildLayout();
                    break;
                case 'clearDirty':
                    var dirtyKey = "NuovaStellaProject";
                    self._dirty = false;
                    self.controller.appController.clearDirty(dirtyKey);
                    
                    self._deploymentList.forEach(function(item) {
                        item.__dirty__ = false;
                    })
                    self.updateAction();
                    break;
            };]]>
        </CodeText>
        <CodeText segment="#methods">
          <![CDATA[        
        _loadModel: function() {
            var self = this;
            this._deploymentList = [];
            this._commonPlugin.pbShowProgressBar("loadDeployment", "Loading project deployments...");
            this._plugin.loadProjectDeploymentList(this._project, function(response) {
                if (response.status == "OK") {
                    self._commonPlugin.pbHideProgressBar("loadDeployment");
                    self._deploymentList = response.value;
                    self._deploymentList.sort(function(a, b) {
                        if (a.name == "Default") return -1;
                        if (b.name == "Default") return 1;
                        return a.name - b.name;
                    });
                    self._buildDeploymentNavList();
                } else {
                    self._plugin.messageDialog('Error', 'Deployment', response.error, null);
                    self._commonPlugin.pbHideProgressBar("loadDeployment");
                }
            });
        },

        _buildLayout: function() {
            this._buildProjectSummaryInfo();
            this._buildDeploymentLeftCtr();
            this._buildDeploymentRightContent();
            this._loadModel();
        },

        _buildProjectSummaryInfo: function() {
            AppUtil.removeAllChildrenOf(this._projectInfo);
            if (!this._project) return;

            var row = domConstruct.create("div", {
                'class': 'horizontal-flex project-info-row'
            });
            this._projectInfo.appendChild(row);

            this._buildProjectInfoItem('Project Name:', this._project.prjName, true, null, row);
            this._buildProjectInfoItem('Project Description:', this._project.prjDesc, true, null, row);
        },

        _refPrjs: function() {
            if (this._project.referenceProjects) return this._project.referenceProjects;
            else return [];
        },

        _warnRefPrjs: function(event) {
            if (this._referenceProjectsWarned) return;
            this._plugin.warnReferenceProjects(this._refPrjs());
            this._referenceProjectsWarned = true;
        },


        _updateDeploymentDefaultValue: function () {
            this._project.__anomaly_changed__ = true;
            var self = this;
            
            this._commonPlugin.pbShowProgressBar("updateDeployment", "update deployment default values...");
            this._plugin.updateProjectAndDeploymentDefaultValues(this._project, null, function (response) {
                if (response.status == 'OK') {
                    self._loadModel();
                }
                self._project.__anomaly_changed__ = true;
                self._commonPlugin.pbHideProgressBar("updateDeployment");
            });
        },
        
        deleteDeployment : function(name){
            if(name == null) return Promise.reject();
            if (name == 'Default') return Promise.reject('Default');
            var self = this;
            self._commonPlugin.pbShowProgressBar("deleteDeployment", "delete project deployment...");
            
            return new Promise(function(resolve, reject){
                self._plugin.deleteProjectDeployment(self._project, name, function(response) {
                    self._commonPlugin.pbHideProgressBar("deleteDeployment");
                    if (response.status == 'OK' && response.value == true) {
                        var deleteDeployment = self._deploymentMap[name];
                        self._deploymentList.splice(self._deploymentList.indexOf(deleteDeployment), 1);
                        self._leftNavGrid.removeChild(deleteDeployment.leftNavItem);
                        delete self._deploymentMap[name];
                        self._onSelectedDeployment('Default');
                        resolve();
                    } else {
                        self._plugin.messageDialog('Error', 'Deployment', response.error, null);
                        reject();
                    }
                });
            });
        },

        _buildDeploymentLeftCtr: function() {
            AppUtil.removeAllChildrenOf(this._deploymentLeftCtr);

            var self = this;
            var topDiv = domConstruct.create("div", {
                'class': 'horizontal-flex deployment-leftnav-topctr',
            });
            this._deploymentLeftCtr.appendChild(topDiv);

            this._deleteIcon = this._buildIconItem('deployment-leftnav-icon', 'fas fa-times-circle', 'Delete Deployment', function() {
                self.deleteDeployment(self._selectedDeployment);
            }, topDiv);
            this._buildIconItem('deployment-leftnav-icon', 'fas fa-plus-circle', 'Add Deployment', function() {
                self._plugin.createDeploymentDialog(function(info) {
                    var name = info.name;
                    self.createDefaultDeployment(name);
                });
            }, topDiv);

            var gridContent = domConstruct.create("div", {
                'class': 'vertical-flex deployment-leftnav-grid',
            });
            this._deploymentLeftCtr.appendChild(gridContent);
            this._leftNavGrid = gridContent;

            var bottomctr = domConstruct.create("div", {
                'class': 'horizontal-flex deployment-leftnav-bottomctr',
            });
            this._deploymentLeftCtr.appendChild(bottomctr);
            
            this._buildIconItem('deployment-leftnav-icon', 'fas fa-cloud-upload-alt', 'Import Deployment', function() {
                self._commonPlugin.doUploadFile(['application/json'], true, function(file) {
                    var uploadFile = JSON.parse(file.content);
                    self._checkDeploymentName(uploadFile.name, {
                            duplicate : confirmRename.bind(null, uploadFile),
                            correct : self.createDeployment.bind(self, uploadFile, true)
                        }
                    );
                });
            }, bottomctr);
            
            this._buildIconItem('deployment-leftnav-icon', 'fas fa-cloud-download-alt', 'Export Deployment', function() {
                download(self._deploymentMap[self._selectedDeployment].value, deploymentFileName(self._project, self._selectedDeployment));
            }, bottomctr);

            function download(deployment, fileName) {
                var data = "application/json;charset=utf-8," + encodeURIComponent(JSON.stringify(deployment));
                var a = document.createElement('a');
                a.href = 'data:' + data;
                a.download = fileName;
                a.style.display = 'none';
                window.body.appendChild(a).click();
                window.body.removeChild(a);
            }

            function deploymentFileName(project, deployName) {
                return project.svc + '_' + project.comp + '_' + project.app + '_' + deployName + '_deployment.json';
            }
            
            function confirmOverwrite(deployment){
                self._plugin.messageDialog('confirm', 'Confirmation Required', message(deployment.name), function(value){
                    if(value){
                        if(deployment.name == 'Default') {
                            self.createDeployment(Object.assign({}, deployment, { name : newDefaultName(1) }), true);
                        }
                        else self.deleteDeployment(deployment.name)
                                 .then(self.createDeployment.bind(self, deployment, true));
                    }
                }); 
                
                function message(name){
                    if(name == 'Default')
                        return 'Deployment Default can not be overwritten, rename the import deployment to ' + newDefaultName(1) + '?';
                
                    return 'Deployment ' + name + ' already exists, overwrite it?';
                }
                
                function newDefaultName(suffix){
                    if(self._deploymentMap['Default' + suffix]) return newDefaultName(suffix + 1);
                    return 'Default' + suffix;
                }
            }
            
            function confirmRename(deployment){
                self._plugin.createDeploymentDialog(rename, deployment.name + ' already exists. Please provide a new name.');
                
                function rename(info){
                    self.createDeployment(Object.assign({}, deployment, { name : info.name }), true);
                }
            }
        },

        _checkDeploymentName: function(name, callbacks) {
            var self = this;
            var message = null;
            if (name == null || name == "") {
                message = 'Deployment name cannot be empty.';
            } else if (self._deploymentMap[name]) {
                message = 'Deployment ' + name + ' already exists, please provide a different name.';
            }
            if (message) {
                if(callbacks && callbacks.duplicate){
                    callbacks.duplicate();
                }else{
                    self._plugin.messageDialog('warn', 'Error', message, null);
                }
                return false;
            }
            callbacks && callbacks.correct && callbacks.correct();
            return true;
        },

        createDefaultDeployment: function(name) {
            var self = this;
            if (name == null) return;

            if (this._checkDeploymentName(name) == false) return;

            self._commonPlugin.pbShowProgressBar("createDefaultDeployment", "create project deployments...");
            self._plugin.generateDeploymentDefaultValues(self._project, name, function(response) {
                self._commonPlugin.pbHideProgressBar("createDefaultDeployment");
                if (response.status == 'OK') {
                    self.createDeployment(response.value)
                } else {
                    self._plugin.messageDialog('Error', 'Deployment', response.error, null);
                }

            });
        },

        createDeployment: function(value, imported) {
            if (value == null) return;
            var name = value.name;
            if (this._checkDeploymentName(name) == false) return;

            var self = this;
            var deployment = {
                name: name,
                value: value
            };

            self._commonPlugin.pbShowProgressBar("createDeployment", "create new project deployment...");
            
            if(imported)
                self._plugin.importProjectDeployment(self._project, deployment.name, deployment.value, handleResponse);
            else
                self._plugin.saveProjectDeployment(self._project, deployment.value, deployment.name, handleResponse);
            
            function handleResponse(response){
                self._commonPlugin.pbHideProgressBar("createDeployment");
                if (response.status == 'OK') {
                    if(imported) deployment.value = response.value;
                    self._dirty = true;
                    self._deploymentList.push(deployment);
                    self._deploymentMap[name] = deployment;
                    self._deploymentMap[name]['leftNavItem'] = self._buildDeploymentListNavItem(name, self._leftNavGrid);
                    self._onSelectedDeployment(name);
                    deployment.__dirty__ = true;
                    self._updateSelection();
                } else {
                    self._plugin.messageDialog('Error', 'Deployment', response.error, null);
                }
            }
        },

        _buildDeploymentNavList: function() {
            AppUtil.removeAllChildrenOf(this._leftNavGrid);
            var deploymentList = this._deploymentList;
            var self = this;
            this._deploymentMap = {};
            deploymentList.forEach(function(item) {
                self._deploymentMap[item.name] = item;
                self._deploymentMap[item.name]['leftNavItem'] = self._buildDeploymentListNavItem(item.name, self._leftNavGrid);
            });
            this._onSelectedDeployment('Default');
        },

        _buildDeploymentListNavItem: function(deployment, parent) {
            var item = domConstruct.create("div", {
                'class': 'horizontal-flex deployment-leftnav-grid-item',
                'innerHTML': deployment,
                'title': deployment
            });
            parent.appendChild(item);

            var self = this;
            $(item).click(function() {
                if (self._selectedDeployment == deployment) return;
                self._onSelectedDeployment(deployment);
            });
            return item;
        },

        _onSelectedDeployment: function(item) {
            this._selectedDeployment = item;
            for (var pro in this._deploymentMap) {
                if (pro != item) {
                    domClass.remove(this._deploymentMap[pro].leftNavItem, 'selected');
                } else {
                    domClass.add(this._deploymentMap[pro].leftNavItem, 'selected');
                }
            }

            if (item == 'Default') {
                domStyle.set(this._deleteIcon, {
                    'opacity': 0.6
                });
            } else {
                domStyle.set(this._deleteIcon, {
                    'opacity': 1
                });
            }

            if (this._dataSourceWidget) {
                this._dataSourceWidget.setModel(this._deploymentMap[item].value.datasourceProfile)
            }

            if (this._parserProfileWidget) {
                this._parserProfileWidget.setModel(this._deploymentMap[item].value.parserProfile.common);
                this._parserProfileWidget.enableCustom('RT Spark Properties');
                this._parserProfileWidget.setTitle('RT Spark Properties', 'Continuous Ingestion Spark Properties');
                this._parserProfileWidget.enableCustom('Service Spark Properties');
                this._parserProfileWidget.setTitle('Service Spark Properties', 'Custom Ingestion Spark Properties');
            }

            if (this._anomalyProfileWidget) {
                this._anomalyProfileWidget.setModel(this._deploymentMap[item].value.anomalyProfile.common);
                this._anomalyProfileWidget.enableCustom('Anomaly Spark Properties');
            }

            this._updateSelection();
            this.subscribeStatusChange();
        },

        _buildDeploymentRightContent: function() {
            AppUtil.removeAllChildrenOf(this._deploymentRightContent);

            var topCtr = domConstruct.create("div", {
                'class': 'horizontal-flex deployment-right-content-topctr'
            });
            this._deploymentRightCtr = topCtr;
            this._deploymentRightContent.appendChild(topCtr);
            this._buildDeploymentRightContentTopCtr();

            var tabContent = domConstruct.create("div", {
                'class': 'vertical-flex deployment-right-tab-content'
            });
            this._deploymentRightContent.appendChild(tabContent);
            this._tabContent = tabContent;

            this._buildDeploymentRightContentViews();
        },

        _deploymentIconList: [{
                "label": "Build",
                "title": "Commands for creating, updating and managing solution models."
            },
            {
                "label": "<i class='fas fa-magic'></i>",
                "title": "Create/Update resource and parser model",
                "value": "tools/create/update"
            },
            {
                "label": "<i class='fas fa-broom'></i>",
                "title": "Reset generated models and artifacts",
                "value": "tools/reset"
            },
            {
                "label": "Custom Ingestion",
                "title": "Commands for Custom Ingestion runtime"
            },
            {
                "label": "<i class='fas fa-play'></i>",
                "title": "Start Custom Ingestion model",
                "value": "service-parser/start"
            },
            {
                "label": "<i class='fas fa-stop'></i>",
                "title": "Stop Custom Ingestion model",
                "value": "service-parser/stop"
            },
            {
                "label": "<i class='fas fa-times'></i>",
                "title": "Purge Custom Ingestion model",
                "value": "service-parser/purge"
            },
            {
                "label": "Continuous Ingestion",
                "title": "Commands for Continuous Ingestion runtime."
            },
            {
                "label": "<i class='fas fa-play'></i>",
                "title": "Start Continuous Ingestion model",
                "value": "rt-parser/start"
            },
            {
                "label": "<i class='fas fa-stop'></i>",
                "title": "Stop Continuous Ingestion model",
                "value": "rt-parser/stop"
            },
            {
                "label": "<i class='fas fa-times'></i>",
                "title": "Purge Continuous Ingestion model",
                "value": "rt-parser/purge"
            },
        ],
        _buildDeploymentRightContentTopCtr: function() {
            AppUtil.removeAllChildrenOf(this._deploymentRightCtr);

            this._deploymentIconMap = {};
            var self = this;
            this._deploymentIconList.forEach(function(item) {
                var div = null;
                if (item.value != null) {
                    div = domConstruct.create("div", {
                        'class': 'horizontal-flex deployment-right-content-ctr-item icon',
                        'innerHTML': item.label,
                        'title': item.title
                    });
                } else {
                    div = domConstruct.create("div", {
                        'class': 'horizontal-flex deployment-right-content-ctr-item',
                        'innerHTML': item.label,
                        'title': item.title
                    });
                }
                item.div = div;
                item.disable = false;
                if (item.value) {
                    self._deploymentIconMap[item.value] = item;
                } else {
                    self._deploymentIconMap[item.label] = item;
                }
                self._deploymentRightCtr.appendChild(div);

                $(div).click(function() {
                    if (item.disable) return;

                    self.onAction(item);
                });
            });
        },

        _viewItems: [{
            name: 'dataSource',
            label: 'Data Source'
        }, {
            name: 'parser',
            label: 'Parser Model'
        }],
        _buildDeploymentRightContentViews: function() {
            var viewTab = domConstruct.create("div", {
                'class': 'horizontal-flex deployment-right-content-view-tab'
            });
            this._tabContent.appendChild(viewTab);
            this._deploymentViewTab = viewTab;

            var viewContent = domConstruct.create("div", {
                'class': 'vertical-flex deployment-right-content-view-content'
            });
            this._tabContent.appendChild(viewContent);
            this._viewContent = viewContent;

            var self = this;
            this._viewTabMap = {};
            this._viewMap = {};
            this._viewItems.forEach(function(item) {
                var tab = domConstruct.create("div", {
                    'class': 'horizontal-flex deployment-right-content-view-tab-item',
                    'innerHTML': item.label
                });
                self._deploymentViewTab.appendChild(tab);
                self._viewTabMap[item.name] = tab;
                $(tab).click(function() {
                    self._onViewTabSelected(item.name);
                });

                var view = domConstruct.create("div", {
                    'class': 'vertical-flex deployment-right-content-view-detail'
                });
                self._viewContent.appendChild(view);
                self._buildViewContent(item, view);
                self._viewMap[item.name] = view;
            });
            this._onViewTabSelected('dataSource')
        },

        _onViewTabSelected: function(view) {
            var self = this
            this._viewItems.forEach(function(item) {
                if (view == item.name) {
                    domClass.add(self._viewTabMap[item.name], 'selected');
                    domStyle.set(self._viewMap[item.name], 'display', 'flex');
                } else {
                    domClass.remove(self._viewTabMap[item.name], 'selected');
                    domStyle.set(self._viewMap[item.name], 'display', 'none');
                }
            });
        },

        _buildViewContent: function(item, parent) {
            var self = this;
            if (item.name == "dataSource") {
                var div = domConstruct.create("div", {
                    'class': 'vertical-flex deployment-right-content-view-detail'
                });
                parent.appendChild(div);
                Widget("DataSourceWidget", function(DataSourceWidget) {
                    self._dataSourceWidget = new DataSourceWidget({
                        model: {},
                        onChange: function() {
                            self._dirty = true;
                            var item = self._selectedDeployment;
                            self._deploymentMap[item].value.datasourceProfile = self._dataSourceWidget.getModel();
                            self._deploymentMap[item].__dirty__ = true;
                            self._updateSelection();
                        }
                    }, div);
                    self._dataSourceWidget.startup();
                });
            } else if (item.name == "parser") {
                var div = domConstruct.create("div", {
                    'class': 'vertical-flex deployment-right-content-view-detail'
                });
                parent.appendChild(div);
                Widget("DeploymentProfileConfigWidget", function(DeploymentProfileConfigWidget) {
                    self._parserProfileWidget = new DeploymentProfileConfigWidget({
                        model: {},
                        onChange: function() {
                            self._dirty = true;
                            var item = self._selectedDeployment;
                            self._deploymentMap[item].value.parserProfile.common = self._parserProfileWidget.getModel();
                            self._deploymentMap[item].__dirty__ = true;
                            self._updateSelection();
                        },
                        convertValues: {
                            datasource: convertDatasource
                        },
                        revertValues: {
                            datasource: revertDatasource
                        }
                    }, div);
                    self._parserProfileWidget.startup();
                });
            }

            function convertDatasource(value) {
                return value && value.dataSource;
            }

            function revertDatasource(value, originValue, originDefaultValue) {
                if (value == null) return null;
                return Object.assign({}, originValue || originDefaultValue, {
                    dataSource: value
                });
            }
        },

        _buildProjectSelectItem: function(label, className, name, options, value, onChange, parent) {
            var item = domConstruct.create("div", {
                'class': 'horizontal-flex project-info-item'
            });
            parent.appendChild(item);

            var div = domConstruct.create("div", {
                'class': 'horizontal-flex project-info-item-left',
            });
            item.appendChild(div);
            this._buildTextItem('project-info-item-label', label, div);

            div = domConstruct.create("div", {
                'class': 'horizontal-flex project-info-item-right'
            });
            item.appendChild(div);
            var widget = this._buildSingleSelectItem(className, name, options, value, onChange, div);

            return {
                div: item,
                widget: widget
            };
        },

        _buildProjectInfoItem: function(label, value, disable, onChange, parent) {
            var item = domConstruct.create("div", {
                'class': 'horizontal-flex project-info-item'
            });
            parent.appendChild(item);

            var div = domConstruct.create("div", {
                'class': 'horizontal-flex project-info-item-left',
            });
            item.appendChild(div);
            this._buildTextItem('project-info-item-label', label, div);

            div = domConstruct.create("div", {
                'class': 'horizontal-flex project-info-item-right'
            });
            item.appendChild(div);
            var widget = this._buildTextInputItem('project-info-item-value', value, disable, onChange, div);

            return {
                div: item,
                widget: widget
            };
        },

        _buildTextItem: function(className, text, parent) {
            var div = domConstruct.create("div", {
                'class': 'horizontal-flex ' + className,
                'innerHTML': text
            });

            parent.appendChild(div);
        },

        _buildTextInputItem: function(className, text, disable, onChange, parent) {
            var div = domConstruct.create("div", {
                'class': 'horizontal-flex ' + className
            });
            parent.appendChild(div);

            return FormUtil.createTextBox('', div, text, null, null, disable, onChange);
        },

        _buildSingleSelectItem: function(className, name, options, value, onChange, parent) {
            var div = domConstruct.create("div", {
                'class': 'horizontal-flex ' + className
            });
            parent.appendChild(div);

            return FormUtil.createSingleSelect(name, div, options, value, null, null, onChange);
        },

        _buildIconLabel: function(className, label, parent) {
            var div = domConstruct.create("div", {
                'class': 'horizontal-flex ' + className,
                'innerHTML': label
            });
            parent.appendChild(div);
            return div;
        },

        _buildIconItem: function(className, iconClass, tooltip, onAction, parent) {
            var div = domConstruct.create("div", {
                'class': 'horizontal-flex ' + className,
                'title': tooltip
            });
            parent.appendChild(div);

            var i = domConstruct.create("i", {
                'class': iconClass
            });
            div.appendChild(i);

            if (onAction) {
                $(div).click(function() {
                    onAction();
                });
            }

            return div;
        },

        _updateSelection: function() {
            if (this.renderer == null || this.renderer.tile == null) return;

            var deployments = this._deploymentList.filter(function(item) {
                return item.__dirty__ === true;
            }).map(function(item) {
                return item.value;
            });
            var content = {
                changed: this._dirty,
                project: this._project,
                deployment: this._selectedDeployment,
                deployments: deployments
            };

            var dirtyKey = "NuovaStellaProject";
            this.controller.appController.markDirty(dirtyKey);

            var selection = [content];

            // use this.renderer.tile._onSelectionChange() to direct selection via Selection port
            this.renderer.tile._onSelectionChange(selection);

            // use this.renderer.tile._doubleClickOnSelection() to direct selection via Drilldown port
            this.renderer.tile._doubleClickOnSelection(selection);

            this.updateAction();
        },
        
        _statusChangeTopic: null,
        subscribeStatusChange: function () {
            var self = this;
            if (this._statusChangeTopic) {
                this.controller._scriptManager._args.stopSubscribeClientEvent(this._statusChangeTopic,  function() { 
                    console.log('stop subscribe the status change of ' + self._project.prjName); 
                });
            }
            
            this._statusChangeTopic = 'so:' + this._project.uuid + ':' + this._selectedDeployment + ':status';
            console.log('start subscribe the status change of ' + this._project.prjName);
            this.controller._scriptManager._args.startSubscribeClientEvent(this._statusChangeTopic, function () {
                self.updateAction();
            });
        },

        getRuntimeStatus: function(callback) {
            this._plugin.getRuntimeStatus(this._project, this._selectedDeployment, function(response) {
                var rtParserStatus = "NOT_FOUND";
                var serviceParserStatus = "NOT_FOUND";
                if (response.status == "OK") {
                    rtParserStatus = response.value.rtParserStatus;
                    serviceParserStatus = response.value.serviceParserStatus;
                } else {
                    rtParserStatus = response.error;
                    serviceParserStatus = response.error;
                }
                callback(serviceParserStatus, rtParserStatus);
            });
        },
        
        stopModel: function (serviceType, instance, callback) {
            var modelType = "";
            if (serviceType == "parser") {
                purgeService = "purgeParserModel";
                if (instance == "RT") {
                    modelType = "continuous ingestion model";
                } else {
                    modelType = "custom ingestion model"
                }
            } else {
                return;
            }
        
            this._plugin.stopModelDialog(this._selectedDeployment, modelType, callback);
        },

        purgeModel: function(serviceType, instance) {
            var self = this;
            var purgeService = null;
            var modelType = "";
            if (serviceType == "parser") {
                purgeService = "purgeParserModel";
                if (instance == "RT") {
                    modelType = "continuous ingestion model";
                } else {
                    modelType = "custom ingestion model"
                }
            } else {
                return;
            }
            if(serviceType == "parser"){
                this._plugin.purgeParserModelDialog(this._selectedDeployment, modelType, function(info) {
                    self._commonPlugin.pbShowProgressBar("purgeProject", "purge " + serviceType + " model...");
                    self._plugin[purgeService](self._project, self._deploymentMap[self._selectedDeployment].value, instance, info.purgeRuntime, info.purgeCheckpoint, info.purgeInput, info.purgeOutput, function(response) {
                        if (response.status == "OK") {
                            self.controller._scriptManager._args.message("growl", "Project", "Project " + serviceType + " model purged", null);
                        } else {
                            self.controller._scriptManager._args.message("error", "Project", self._commonPlugin.getErrorFromThrownException(response.error), null);
                        }
                        self._commonPlugin.pbHideProgressBar("purgeProject");
                    });
                });
            }else{
                this._plugin.purgeModelDialog(this._selectedDeployment, modelType, function(info) {
                    self._commonPlugin.pbShowProgressBar("purgeProject", "purge " + serviceType + " model...");
                    self._plugin[purgeService](self._project, self._deploymentMap[self._selectedDeployment].value, instance, info.purgeRuntime, info.purgeCheckpoint, function(response) {
                        if (response.status == "OK") {
                            self.controller._scriptManager._args.message("growl", "Project", "Project " + serviceType + " model purged", null);
                        } else {
                            self.controller._scriptManager._args.message("error", "Project", self._commonPlugin.getErrorFromThrownException(response.error), null);
                        }
                        self._commonPlugin.pbHideProgressBar("purgeProject");
                    });
                });
            }
        },

        updateAction: function(callback) {
            var self = this;
            this.getRuntimeStatus(function(serviceParserStatus, rtParserStatus) {
                var action_data = [{
                        "value": "tools/create/update",
                        "disable": self._dirty
                    },
                    {
                        "value": "tools/reset",
                        "disable": false
                    },
                    {
                        "value": "service-parser/start",
                        "disable": serviceParserStatus != "NOT_ACTIVE" || serviceParserStatus == "NOT_FOUND"
                    },
                    {
                        "value": "service-parser/stop",
                        "disable": serviceParserStatus != "ACTIVE" || serviceParserStatus == "NOT_FOUND"
                    },
                    {
                        "value": "service-parser/purge",
                        "disable": serviceParserStatus != "NOT_ACTIVE" || serviceParserStatus == "NOT_FOUND"
                    },
                    {
                        "value": "rt-parser/start",
                        "disable": rtParserStatus != "NOT_ACTIVE" || rtParserStatus == "NOT_FOUND"
                    },
                    {
                        "value": "rt-parser/stop",
                        "disable": rtParserStatus != "ACTIVE" || rtParserStatus == "NOT_FOUND"
                    },
                    {
                        "value": "rt-parser/purge",
                        "disable": rtParserStatus != "NOT_ACTIVE" || rtParserStatus == "NOT_FOUND"
                    },
                ];

                action_data.forEach(function(item) {
                    if (item.disable) {
                        self._deploymentIconMap[item.value].disable = true;
                        domClass.add(self._deploymentIconMap[item.value].div, 'disabled');
                        domStyle.set(self._deploymentIconMap[item.value].div, "opacity", 0.6);
                    } else {
                        self._deploymentIconMap[item.value].disable = false;
                        domClass.remove(self._deploymentIconMap[item.value].div, 'disabled');
                        domStyle.set(self._deploymentIconMap[item.value].div, "opacity", 1);
                    }
                });
                
                if (lang.isFunction(callback)) {
                    callback();
                }
            });
        },

        onAction: function(item) {
            var self = this;
            switch (item.value) {
                case "tools/create/update":
                    var title = "Deployment " + self._selectedDeployment + ": Confirmation Required";
                    self._plugin.openUpdateOptionDialog(self._commonPlugin, title, "Update generated models and artifacts?",function(options) {
                        self._commonPlugin.pbShowProgressBar("updateProject", "Create/Update models and artifacts...");
                        self._plugin.updateProject(self._project, self._selectedDeployment, options, function(response) {
                            if (response.status == "OK") {
                                self.controller._scriptManager._args.message("growl", "Project", "Project models and artifacts created/updated.", null);
                            } else {
                                self.controller._scriptManager._args.message("error", "Project", self._commonPlugin.getErrorFromThrownException(response.error), null);
                            }
                            self._commonPlugin.pbHideProgressBar("updateProject");
                            self.updateAction();
                            self._updateSelection();
                        });
                    });
                    break;
                case "tools/reset":
                    var title = "Deployment " + self._selectedDeployment + ": Confirmation Required";
                    self._plugin.openResetOptionDialog(self._commonPlugin, title, "Reset/Delete generated models and artifacts?",function(options) {
                        self._commonPlugin.pbShowProgressBar("resetProject", "Reset models and artifacts...");
                        self._plugin.resetProject(self._project, self._selectedDeployment,options, function(response) {
                            if (response.status == "OK") {} else {}
                            self._commonPlugin.pbHideProgressBar("resetProject");
                            self.updateAction();
                            self._updateSelection();
                        });
                    });
                    
                    break;
                case "service-parser/start":
                    var deployment = self._deploymentMap[ self._selectedDeployment];
                    self._plugin.saveProjectDeployment(self._project, deployment.value, deployment.name, function () {
                        self._plugin.checkDeploymentStartable(self._commonPlugin, self._project, self._selectedDeployment, function() {
                            self._plugin.openRuntimeProfileDialog(self._project, {
                                commonPlugin : self._commonPlugin,
                                controller : self.controller,
                                callback : function(value){
                                    self._commonPlugin.pbShowProgressBar("startServiceParserModel", "Starting service parser model...");
                                    self._plugin.startParserModelWithProfile(self._project, self._selectedDeployment, "Service", value, function(response) {
                                        if (response.status == "OK") {
                                            if (response.value == "ACTIVE") {
                                                self.controller._scriptManager._args.message("growl", "Project", "Service parser  model started.", null);
                                            } else {
                                                self.controller._scriptManager._args.message("error", "Project", response.value, null);
                                            }
                                        } else {
                                            self.controller._scriptManager._args.message("error", "Project", response.error, null);
                                        }
                                        self._commonPlugin.pbHideProgressBar("startServiceParserModel");
                                        self.updateAction();
                                    });
                                },
                                cancelCallback : function(){
                                    self._commonPlugin.pbHideProgressBar("startServiceParserModel");
                                }
                            }, "parser", self._selectedDeployment, "Service");
                        });
                    });
                    break;
                case "service-parser/stop":
                    self.stopModel("parser", "Service", function () {
                        self._commonPlugin.pbShowProgressBar("stopServiceParserModel", "Stopping service parser model...");
                        self._plugin.stopParserModel(self._project, self._selectedDeployment, "Service", function(response) {
                            if (response.status == "OK") {
                                if (response.value == "NOT_ACTIVE") {
                                    self.controller._scriptManager._args.message("growl", "Project", "Service parser stopped.", null);
                                } else {
                                    self.controller._scriptManager._args.message("error", "Project", response.value, null);
                                }
                            } else {
                                self.controller._scriptManager._args.message("error", "Project", response.error, null);
                            }
                            self._commonPlugin.pbHideProgressBar("stopServiceParserModel");
                            self.updateAction();
                        });
                    });
                    break;
                case "service-parser/purge":
                    self.purgeModel("parser", "Service");
                    break;
                case "rt-parser/start":
                    var deployment = self._deploymentMap[ self._selectedDeployment];
                    self._plugin.saveProjectDeployment(self._project, deployment.value, deployment.name, function () {
                        self._plugin.checkDeploymentStartable(self._commonPlugin, self._project, self._selectedDeployment, function() {
                            self._plugin.openRuntimeProfileDialog(self._project, {
                                commonPlugin : self._commonPlugin,
                                controller : self.controller,
                                callback : function(value){
                                    self._commonPlugin.pbShowProgressBar("startParserModel", "Starting RT parser model...");
                                    self._plugin.startParserModelWithProfile(self._project, self._selectedDeployment, "RT", value, function(response) {
                                        if (response.status == "OK") {
                                            if (response.value == "ACTIVE") {
                                                self.controller._scriptManager._args.message("growl", "Project", "RT parser model started.", null);
                                            } else {
                                                self.controller._scriptManager._args.message("error", "Project", response.value, null);
                                            }
                                        } else {
                                            self.controller._scriptManager._args.message("error", "Project", response.error, null);
                                        }
                                        self._commonPlugin.pbHideProgressBar("startParserModel");
                                        self.updateAction();
                                    });
                                },
                                cancelCallback : function(){
                                    self._commonPlugin.pbHideProgressBar("startParserModel");
                                }
                            }, "parser", self._selectedDeployment, "RT");
                        });
                    });
                    break;
                case "rt-parser/stop":
                    self.stopModel("parser", "RT", function () {
                        self._commonPlugin.pbShowProgressBar("stopParserModel", "Stopping RT parser model...");
                        self._plugin.stopParserModel(self._project, self._selectedDeployment, "RT", function(response) {
                            if (response.status == "OK") {
                                if (response.value == "NOT_ACTIVE") {
                                    self.controller._scriptManager._args.message("growl", "Project", "RT parser model stopped.", null);
                                } else {
                                    self.controller._scriptManager._args.message("error", "Project", response.value, null);
                                }
                            } else {
                                self.controller._scriptManager._args.message("error", "Project", response.error, null);
                            }
                            self._commonPlugin.pbHideProgressBar("stopParserModel");
                            self.updateAction();
                        });
                    });
                    break;
                case "rt-parser/purge":
                    self.purgeModel("parser", "RT");
                    break;
            }
        }
        ]]>
        </CodeText>
        <CodeText segment="#postCreate">
          <![CDATA[            var self = this;
            self._actionDataHandler = window.setInterval(function () {
                if (!self._project || self.actionDataUpdating == true) return;
                
                self.actionDataUpdating == true;
                self.updateAction(function() {
                    self.actionDataUpdating = false;
                });
            }, 120 * 1000);]]>
        </CodeText>
        <CodeText segment="#destroy">
          <![CDATA[            if (this._statusChangeTopic) {
                this.controller._scriptManager._args.stopSubscribeClientEvent(this._statusChangeTopic,  function() {
                });
            }
            
            if (this._actionDataHandler != null) {
                window.clearInterval(this._actionDataHandler);
            }]]>
        </CodeText>
        <HtmlText>
          <![CDATA[<div class="nuova-stella metric-workbench-deployment" style="width:100%;height:100%;border:none;background-color:white;">
    <style>
        @import '/vitria-oi/rest/app/dbp/user/via_common/dbpm/VIA - Common/VIA-CSS';
        .horizontal-flex {
            display: flex;
            flex-direction: row;
            justify-content: center;
            align-items: center;
            box-sizing: border-box;
        }
        
        .vertical-flex {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-content: center;
            box-sizing: border-box;
        }
        
        .metric-workbench-deployment .project-info {
            width: 100%;
            height: 35px;
        }
        
        .metric-workbench-deployment .project-info-row {
            width: 100%;
            height: 100%;
            box-sizing: border-box;
            justify-content: flex-start;
        }
        
        .metric-workbench-deployment .project-info-row .project-info-item {
            width: 50%;
            height: 100%;
        }
        
        .metric-workbench-deployment .project-info-item .project-info-item-left {
            width: 150px;
            height: 100%;
            padding-right: 10px;
            justify-content: flex-end;
        }
        
        .metric-workbench-deployment .project-info-item .project-info-item-right {
            width: calc(100% - 150px);
            height: 100%;
            padding-right: 10px;
            justify-content: flex-start;
        }
        
        .metric-workbench-deployment .project-info-item .project-info-item-value {
            width: 100%;
        }
        
        .metric-workbench-deployment .deployment-project-info {
            width: 100%;
            height: 35px;
            border-bottom: 2px solid #999999;
        }
        
        .metric-workbench-deployment .deployment-content {
            width: 100%;
            height: calc(100% - 37px);
        }
        
        .metric-workbench-deployment .deployment-left-content {
            width: 250px;
            height: 100%;
            border-right: 2px solid #999999;
        }
        
        .metric-workbench-deployment .deployment-right-content {
            width: calc(100% - 250px);
            height: 100%;
            justify-content: flex-start;
        }
        
        .metric-workbench-deployment .deployment-leftnav-topctr,
        .metric-workbench-deployment .deployment-leftnav-bottomctr {
            width: 100%;
            height: 30px;
            justify-content: flex-end;
            background-color: rgba(0, 0, 0, 0.1);
        }
        
        .metric-workbench-deployment .deployment-leftnav-grid {
            width: 100%;
            height: calc(100% - 60px);
            border-top: 1px solid #CCCCCC;
            border-bottom: 1px solid #CCCCCC;
            justify-content: flex-start;
            overflow-y: auto;
            overflow-x: hidden;
        }
        
        .metric-workbench-deployment .deployment-leftnav-icon {
            padding-right: 15px;
            font-size: 14px;
        }
        
        .metric-workbench-deployment .deployment-leftnav-grid-item {
            padding-left: 5px;
            padding-right: 5px;
            width: 100%;
            height: 30px;
            border-bottom: 1px solid #CCCCCC;
            justify-content: flex-start;
            font-size: 14px;
            padding-top: 5px;
            padding-bottom: 5px;
            overflow: hidden;
            white-space: nowrap;
            text-overflow: ellipsis;
            display: block;
        }
        
        .metric-workbench-deployment .deployment-leftnav-grid-item.selected,
        .metric-workbench-deployment .deployment-leftnav-grid-item.selected:hover {
            background: rgba(20, 138, 196, 0.6);
            color: white;
        }
        
        .metric-workbench-deployment .deployment-leftnav-grid-item:hover {
            background-color: #e9f2fe;
            color: #000000;
        }
        
        .metric-workbench-deployment .deployment-right-content-topctr {
            width: 100%;
            height: 30px;
            justify-content: flex-start;
            background-color: rgba(0, 0, 0, 0.1);
        }
        
        .metric-workbench-deployment .deployment-right-content-topctr {
            width: 100%;
            height: 30px;
            justify-content: flex-start;
        }
        
        .metric-workbench-deployment .deployment-right-tab-content {
            width: 100%;
            height: calc(100% - 30px);
            justify-content: flex-start;
        }
        
        .metric-workbench-deployment .deployment-right-content-ctr-item {
            padding-left: 5px;
            padding-right: 5px;
        }
        
        .metric-workbench-deployment .deployment-right-content-ctr-item.icon {
            cursor: pointer;
            width: 25px;
            height: 25px;
            padding-top: 5px;
            padding-bottom: 5px;
            box-sizing: border-box;
        }
        
        .metric-workbench-deployment .deployment-right-content-ctr-item.icon.disabled {
            cursor: inherit;
        }
        
        .metric-workbench-deployment .deployment-right-content-ctr-item.icon:hover {
            border: 1px solid #759dc0;
            background-color: #bcd8f4;
        }
        
        .metric-workbench-deployment .deployment-right-content-ctr-item.icon.disabled:hover {
            border: 0px solid #759dc0;
            background-color: rgba(171, 214, 255, 0);
        }
        
        .metric-workbench-deployment .deployment-right-content-view-tab {
            width: 100%;
            height: 30px;
            padding-left: 5px;
            background-color: #f5f5f5;
            border-bottom: 1px solid #148ac4;
            justify-content: flex-start;
        }
        
        .metric-workbench-deployment .deployment-right-content-view-tab-item {
            height: 100%;
            width: 110px;
            color: #148ac4;
            border-radius: 0;
            border-top-left-radius: 3px;
            border-top-right-radius: 3px;
        }
        
        .metric-workbench-deployment .deployment-right-content-view-tab-item.selected {
            background-color: rgba(20, 138, 196, 0.8);
            color: white;
        }
        
        .metric-workbench-deployment .deployment-right-content-view-content {
            width: 100%;
            height: calc(100% - 30px);
        }
        
        .metric-workbench-deployment .deployment-right-content-view-detail {
            width: 100%;
            height: 100%;
        }
        
        .metric-workbench-deployment .project-anomaly-reference-input {
            height: 100%;
            width: calc(100% - 20px);
            justify-content: flex-start;
        }
        
        .metric-workbench-deployment .project-anomaly-reference-icon {
            height: 100%;
            width: 20px;
        }
    </style>
    <div class="deployment-project-info vertical-flex">
        <div data-dojo-attach-point="_projectInfo" class="project-info vertical-flex">
        </div>
    </div>
    <div class="deployment-content horizontal-flex">
        <div data-dojo-attach-point="_deploymentLeftCtr" class="vertical-flex deployment-left-content">
        </div>
        <div data-dojo-attach-point="_deploymentRightContent" class="vertical-flex deployment-right-content">
        </div>
    </div>
</div>
]]>
        </HtmlText>
      </Widget>
    </Widgets>
    <Functions>
      <Function name="checkDeploymentStartable" args="CommonPlugin,project,deployment,callback" private="false">
        <CodeText>
          <![CDATA[var self = this;

var checkFields = [
    "preprocessStatus",
    "rtParserStatus",
    "serviceParserStatus",
];
CommonPlugin.pbShowProgressBar("getProjectRuntimeStatuses", "Retrieving project deployments runtime statuses...");
this.getProjectRuntimeStatuses(project, function (response) {
    CommonPlugin.pbHideProgressBar("getProjectRuntimeStatuses"); 
    if (response.status == "OK") {
        var result = false;
        var warnText = "";
        
        for (var i = 0; i < response.value.length; i++) {
            var item = response.value[i];
            
            if (item.deployment == deployment) continue;
            for (var j = 0; j < checkFields.length; j++) {
                var field = checkFields[j];
                if (item[field] == "ACTIVE") {
                    result = true;
                    warnText = "Deployment " + item.deployment + " is running, please stop it."
                    break;
                }
            }
            
            if (result == true) break;
        }
        
        if (result) {
            message(
                "warn",
                "Warn",
                warnText,
                function(value) {
                }
            );
        } else {
            callback(true);
        }
    } else {
        callback(true);
    }
});]]>
        </CodeText>
      </Function>
      <Function name="createDeploymentDialog" args="callback,additionMessage" private="false">
        <CodeText>
          <![CDATA[prompt(
    "New Deployment",
    additionMessage || "Please provide name to create new deployment.",
    [
        {name: "name", label: "Deployment Name", type: "string", value: "", disabled: false, style: {
            "width" : "200px",
            "height" : "30px",
            "font-family" : "monospace",
        },
            attributes : {
                pattern : '^[_a-zA-Z]([_a-zA-Z0-9]{0,31})$',
            },
            errorMessage : {
                valueMissing : "Name can't be empty",
                patternMismatch  : "Name can start with a letter or underscores, only contains \"a-z A-Z 0-9 _\" and have a limit of 32 characters."
            }
        }
    ],
    [
        {label: "Yes", value: true, rejectInvalidItem : true, 'class' : "saveButton"},
        {label: "No", value: false},
    ],
    {
        width: "500px",
        "container" : {
            "background-color" : "white",
        },
        "form-label" : {
            "width" : "10%",
            "white-space" : "nowrap",
        },
        "form-value" : {
            "width" : "90%",
        },
    },
    function(value, info) {
        if (value) {
            callback(info);
        }
    }
);
]]>
        </CodeText>
      </Function>
      <Function name="messageDialog" args="category,title,msg,callback" private="false">
        <CodeText>
          <![CDATA[message(category, title, msg, callback);]]>
        </CodeText>
      </Function>
      <Function name="openDeployDialog" args="project,deployment,config,serviceType,instance," private="false">
        <CodeText>
          <![CDATA[const commonPlugin = config.commonPlugin;
const width = config.width;
const height = config.height;
const controller = config.controller;
const callback = config.callback;
const title = config.title;
const customSettings = config.customSettings;
const tabs = config.tabs;
const cancelCallback = config.cancelCallback;
const selectTabIndex = config.selectTabIndex;

var profile = null;
try{
    if (serviceType == "parser") {
        this.getRuntimeParserProfile(project, deployment, instance, function (response) {
            if (response.status == "OK") {
                profile = response.value;
                require(['af/controls/tabbar/TabBarEditorWidget', "spark/property/controls/widgets/SparkSelectControl"],
                    (TabBarEditorWidget, SparkSelectControl) => openDialog(produceModel(profile), TabBarEditorWidget, SparkSelectControl));
            }
        });
    } else {
        this.getRuntimeAnomalyProfile(project, deployment, instance, function (response) {
            profile = response.value;
            if (response.status == "OK") {
                require(['af/controls/tabbar/TabBarEditorWidget'], TabBarEditorWidget => openDialog(produceModel(profile), TabBarEditorWidget));
            }
        });
    }
}catch(e){
    console.error(e);
}

function openDialog(deployModel, TabBarEditorWidget, SparkSelectControl){
    var sparkProperties =  ["spark.executor.memory", "spark.cores.max", "spark.executor.instances", "spark.executor.cores", "spark.master"];
    deployModel["Spark Properties"] = deployModel["Spark Properties"].filter(function (item) {
        return item.__deployment__ == true;
    });
    
    if (config.debug == true) {
        var debugIgnoreProperties = ["spark_sql_table", "spark_sql_table_url", "anomaly_file_url", "anomaly_file_name_prefix", "agg_dropped_events", "auditUrl"];
        deployModel["DataFlow Properties"] = deployModel["DataFlow Properties"].filter(function (item) {
            return debugIgnoreProperties.indexOf(item.id) == -1;
        });
    }
    
    var widgetPath = "/app/dbp/space/VIAOps Signal Onboarding/dbpm/VIAOps - Signal Onboarding Deployment Service/DeploymentTabEditor";
    var widgetConfig = {
        tabClass : TabBarEditorWidget,
        vtWidth : width,
        vtHeight : height,
        convertValues : convertValues(),
        revertValues : revertValues(),
        customSettings : customSettings,
        selectTabIndex : selectTabIndex,
        controlTypes : {
            "target" : {
                constraints : { 
                    type : SparkSelectControl,
                    args : {
                        needPlaceholder : true,
                        options : [
                            { label : 'Metric Table', value : 'History' }, 
                            { label : 'Anomaly Detection', value : 'Anomaly' }, 
                            { label : 'Both', value : 'Both' }
                        ]
                    }
                }
            },
            
            "time_zone" : {
                enumSource : "rest:/global/?op=get.timezones"
            },
            
            "dataSource" : {
                type : 'datasource'
            },
            
            "stop_after_batch" : {
                type : 'integer',
                constraints : {
                    max : "999999",
                    min : '0',
                    step : '1'
                }
            },
            
            "poll_rate" : {
                type : 'integer',
                constraints : {
                    max : "999999",
                    min : '0',
                    step : '1'
                }
            }
        }
    };
    commonPlugin.popupWidget(controller, title, width, height, true, deployModel, widgetPath, widgetConfig, function(value) {
        profile.common.global = value["DataFlow Properties"];
        if (config.debug == true) {
            profile.common.global.push({
                "label": "Dropped Events Table",
                "type": "string",
                "id": "agg_dropped_events",
                "defaultValue": ("so_" + project.safePrefix + "_debug_audit_parser_dropped").replace(/[\W_]+/g, " ").replace(/\s+/g, "_"),
                "value": ("so_" + project.safePrefix + "_debug_audit_parser_dropped").replace(/[\W_]+/g, " ").replace(/\s+/g, "_")
            });
            profile.common.global.push({
                "label": "Audit Log Table",
                "type": "string",
                "id": "auditUrl",
                "defaultValue": ("so_" + project.safePrefix + "_debug_audit_parser").replace(/[\W_]+/g, " ").replace(/\s+/g, "_"),
                "value": ("so_" + project.safePrefix + "_debug_audit_parser").replace(/[\W_]+/g, " ").replace(/\s+/g, "_")
            });
            profile.common.global.push({
                "label": "Test and Debug",
                "type": "boolean",
                "id": "test",
                "defaultValue": "true",
                "value": "true"
            });
        }
        
        var sparkMap = {};
        profile.common.spark.forEach(function (item) {
            sparkMap[item.id] = item;
        });
        
        value["Spark Properties"].forEach(function (item) {
            delete item.__deployment__;
            if (sparkMap[item.id] != null) {
                sparkMap[item.id].value = item.value;
            } else {
                profile.common.spark.push(item);
            }
        });
        
        callback && callback(profile);    
    }, function(value){
        cancelCallback && cancelCallback();
    });
}

function convertValues(){
    return {
        [tabName('global')] : { datasource : convertDatasource }
    };
}

function revertValues(){
    return {
        [tabName('global')] : { datasource : revertDatasource }
    };
}

function tabName(name){
    if(find()) return find().label || find();
    return name;

    function find(){
        return tabs.find( t => name === (t.name || t));
    }
}

function convertDatasource(value) {
    return value && value.dataSource;
}

function revertDatasource(value, originValue, originDefaultValue) {
    if (value == null) return null;
    return Object.assign({}, originValue || originDefaultValue, {
        dataSource: value
    });
}

function produceModel(profile){
    return tabs.reduce(produce, {});
    
    function produce(model, tab){
        switch(name()){
            case "global":
                model[label()] = profile.common[name()]; 
                break;
            case "spark": 
                model[label()] = profile.common[name()]; 
                break;
        }
        return model;
        
        function name(){
            return typeof tab === 'string' ? tab : tab.name;
        }
        
        function label(){
            return typeof tab === 'string' ? tab : tab.label;
        }
    }
}



function transformObject(obj, info){
    return info.map(transform);
    
    function transform(i){
        return {
            id : i.id,
            label : i.label,
            defaultLabel : i.defaultLabel,
            defaultValue : obj[i.id],
            type : i.type
        };
    }
}

// function transformObject(obj){
//     return Object.keys(obj).map(transform);
    
//     function transform(key){
//         return {
//             id : key,
//             label : key,
//             defaultValue : obj[key],
//             defaultLabel : obj[key]
//         };
//     }
// }
]]>
        </CodeText>
      </Function>
      <Function name="openReferenceProjectDialog" args="CommonPlugin,title,project,callback" private="false">
        <CodeText>
          <![CDATA[var self = this;
CommonPlugin.popupDialog(title, 500, 300, false, function(dialog, domGeom, domStyle, domClass, domAttr, domConstruct, on) {
    
    function onSelect(evt) {
        if (evt.type == "dgrid-select") {
            dialog.value = evt.rows[0].data;
        }
        else if (evt.type == "dgrid-deselect") {
            dialog.value = null;
        }
        dialog.setOkButtonEnable(dialog.value != null);
    }

    require(["af/utils/GridUtil"], function(GridUtil) {
        var div = domConstruct.create("div", {
            "class" : "via-scroller"
        });
        dialog.containerNode.appendChild(div);
        
        CommonPlugin.pbShowProgressBar("listProjects", "Retrieving list of projects...");
        self.listReferenceProjects(project, function(response) {
            if (response.status == "OK") {
                var projects = response.value;
                var columns = [{
                    field : "prjName",
                    label : "Project Name",
                    style : "font-family:monospace;cursor:pointer;",
                    sortable : true,
                }];
                var store = GridUtil.createGridStore("prjName", projects);
                var grid = GridUtil.createGridWidget("Projects", div, false, null, columns, store,
                                                     onSelect, null, "single", onSelect, null);
                grid.set('sort', 'prjName');
            }
            CommonPlugin.pbHideProgressBar("listProjects");
        })
    });

    dialog.setOkButtonEnable(false);

}, callback, "OK");
]]>
        </CodeText>
      </Function>
      <Function name="openRuntimeProfileDialog" args="project,config,serviceType,deployment,instance," private="false">
        <CodeText>
          <![CDATA[var modelType = "";
if (serviceType == "parser") {
    if (instance == "Debug") {
        modelType = "debug ingestion model";
    } else if (instance == "RT") {
        modelType = "continuous ingestion model";
    } else {
        modelType = "custom ingestion model"
    }
} else if (serviceType == "anomaly") {
    modelType = "anomaly model";
}

var title = "Deployment " + deployment + ": start " + modelType;
    
try{
    const dialogConfig = {
        commonPlugin : config.commonPlugin,
        controller : config.controller,
        width : 1000,
        height : 600,
        callback : config.callback || function(){},
        cancelCallback : config.cancelCallback,
        title : title,
        customSettings : {'Spark Properties' : true},
        tabs : tabs(),
        debug: config.debug,
        selectTabIndex : 1
    };
    this.openDeployDialog(project, deployment, dialogConfig, serviceType, instance);
}catch(e){
    console.error(e);
}

function tabs(){
    const result = [{
        name: "spark",
        label: "Spark Properties"
    }, {
        name: "global",
        label: "DataFlow Properties"
    }];
    return result;
}]]>
        </CodeText>
      </Function>
      <Function name="purgeModelDialog" args="deployment,modelType,callback" private="false">
        <CodeText>
          <![CDATA[var styleNode = document.createElement('style');
styleNode.type = "text/css";
styleNode.textContent = 
    ".appDialog:last-of-type .appDialogContent table{ display : flex; flex-direction : column; }" +
    ".appDialog:last-of-type .appDialogContent table tr{ display : flex; flex-direction : row-reverse; padding : 2px 0 2px 0} " +
    ".appDialog:last-of-type .appDialogContent table td{ flex : 0 0 0; padding-right : 2px }" +
    ".appDialog:last-of-type .appDialogContent table td:nth-of-type(1){ flex : 1 1 0; padding-right : 0px }" +
    ".appDialog:last-of-type .subOptionLabel, .appDialog:last-of-type .subOptionValue{ position : relative; left : calc( 1em + 2px ) }"
document.head.appendChild(styleNode);

prompt(
    "Deployment " + deployment + ": Purge " + modelType,
    "Purging this model will remove all data selected below (at least one data should be selected). Do you want to continue purging it?",
    [
        {name: "purgeCheckpoint", label: "Purge Checkpoint", type: "boolean", value: true, disabled: false, style: {
            "height" : "15px",
            "width": "20px",
            "font-family" : "monospace",
        }},
        
        {name: "purgeRuntime", label: "Purge Runtime", type: "boolean", value: false, disabled: false, style: {
            "height" : "15px",
            "width": "20px",
            "font-family" : "monospace",
        }}
    ],
    [
        {label: "Purge", value: true, "class": "saveButton"},
        {label: "Cancel", value: false},
    ],
    {
        width: "500px",
        "container" : {
            "background-color" : "white",
        },
        "form-label" : {
            "width" : "10%",
            "white-space" : "nowrap",
        },
        "form-value" : {
            "width" : "90%",
        },
    },
    function(value, info) {
        try{
            if (value) {
                callback(info);
            }
        }finally{
            document.head.removeChild(styleNode);
        }
    }
);
]]>
        </CodeText>
      </Function>
      <Function name="purgeParserModelDialog" args="deployment,modelType,callback" private="false">
        <CodeText>
          <![CDATA[var styleNode = document.createElement('style');
styleNode.type = "text/css";
styleNode.textContent = 
    ".appDialog:last-of-type .appDialogContent table{ display : flex; flex-direction : column; }" +
    ".appDialog:last-of-type .appDialogContent table tr{ display : flex; flex-direction : row-reverse; padding : 2px 0 2px 0} " +
    ".appDialog:last-of-type .appDialogContent table td{ flex : 0 0 0; padding-right : 2px }" +
    ".appDialog:last-of-type .appDialogContent table td:nth-of-type(1){ flex : 1 1 0; padding-right : 0px }" +
    ".appDialog:last-of-type .subOptionLabel, .appDialog:last-of-type .subOptionValue{ position : relative; left : calc( 1em + 2px ) }"
document.head.appendChild(styleNode);

prompt(
    "Deployment " + deployment + ": Purge " + modelType,
    "Purging this model will remove all data selected below (at least one data should be selected). Do you want to continue purging it?",
    [
        {name: "purgeCheckpoint", label: "Purge Checkpoint", type: "boolean", value: true, disabled: false, style: {
            "height" : "15px",
            "width": "20px",
            "font-family" : "monospace",
        }},
        
        {name: "purgeRuntime", label: "Purge Runtime", type: "boolean", value: false, disabled: false, style: {
            "height" : "15px",
            "width": "20px",
            "font-family" : "monospace",
        } },
        
        {name: "purgeInputOutput", label: "Purge Input/Output", type: "boolean", value: false, disabled: false, style: {
            "height" : "15px",
            "width": "20px",
            "font-family" : "monospace",
        },
         
            eventHandlers : {'click' : clickInputOutput } 
        },
        
        {name: "purgeInput", label: "<span class=\"subOptionLabel\">Purge Input</span>", type: "boolean", value: false, disabled: false, style: {
            "height" : "15px",
            "width": "20px",
            "font-family" : "monospace",
        },
            attributes : { 'class' : 'subOptionValue' },
            eventHandlers : {'click' : clickInputOrOutput }
        },
        
        {name: "purgeOutput", label: "<span class=\"subOptionLabel\">Purge Output</span>", type: "boolean", value: false, disabled: false, style: {
            "height" : "15px",
            "width": "20px",
            "font-family" : "monospace",
        },
            attributes : { 'class' : 'subOptionValue' },
            eventHandlers : {'click' : clickInputOrOutput }
        }
    ],
    [
        {label: "Purge", value: true, "class": "saveButton"},
        {label: "Cancel", value: false},
    ],
    {
        width: "500px",
        "container" : {
            "background-color" : "white"
        },
        "form-label" : {
            "width" : "10%",
        },
        "form-value" : {
            "width" : "90%",
        },
    },
    function(value, info) {
        document.head.removeChild(styleNode);
        if (value) {
            callback(info);
        }
    }
);

function clickInputOutput(event){
    inputItem(this).control.checked = event.target.checked;
    outputItem(this).control.checked = event.target.checked;
}

function inputItem(dialog){
    return dialog._items.find( i => i.name === 'purgeInput' );
}

function outputItem(dialog){
    return dialog._items.find( i => i.name === 'purgeOutput' );
}

function inputOutputItem(dialog){
    return dialog._items.find( i => i.name === 'purgeInputOutput' );
}

function clickInputOrOutput(event){
    inputOutputItem(this).control.checked = inputItem(this).control.checked && outputItem(this).control.checked;
}]]>
        </CodeText>
      </Function>
      <Function name="serviceStartProfileDialog" args="CommonPlugin,title,project,callback" private="false">
        <CodeText>
          <![CDATA[var self = this;
var result = {
    'stop_after_batch': 1,
    'start_date': toIsoDate(new Date()),
    'end_date': toIsoDate(new Date(Date.now() + 24 * 60 * 60 * 1000))
};
CommonPlugin.popupDialog(title, 300, 200, false, function(dialog, domGeom, domStyle, domClass, domAttr, domConstruct, on) {
    require(["ax/flow/utils/FormUtil"], function(FormUtil) {
        var mainContent = domConstruct.create("div", {
            'style': 'with: 100%; height: 100%; justify-content: flex-start;',
            'class': 'vertical-flex'
        });
        dialog.containerNode.appendChild(mainContent);

        var row = domConstruct.create("div", {
            'style': 'width: 100%; height: 30px;',
            'class': 'horizontal-flex'
        });
        mainContent.appendChild(row);

        var item = domConstruct.create("div", {
            'style': 'width: 50%; height: 100%; justify-content: flex-end;',
            'class': 'horizontal-flex',
            'innerHTML': 'Stop After N Batch'
        });
        row.appendChild(item);

        item = domConstruct.create("div", {
            'style': 'width: 50%; height: 100%; justify-content: flex-start; padding-left: 10px;',
            'class': 'horizontal-flex'
        });
        row.appendChild(item);
        FormUtil.createNumberSpinner('', item, 1, 0, Number.MAX_VALUE, 1, 0, false, false, '', function(value) {
            result['stop_after_batch'] = value.value;
            dialog.setOkButtonEnable(true);

        }, false);

        var row = domConstruct.create("div", {
            'style': 'with: 100%; height: 30px;',
            'class': 'horizontal-flex'
        });
        mainContent.appendChild(row);

        var item = domConstruct.create("div", {
            'style': 'width: 50%; height: 100%; justify-content: flex-end;',
            'class': 'horizontal-flex',
            'innerHTML': 'Start Date:'
        });
        row.appendChild(item);

        item = domConstruct.create("div", {
            'style': 'width: 50%; height: 100%; justify-content: flex-start; padding-left: 10px;',
            'class': 'horizontal-flex'
        });
        row.appendChild(item);
        FormUtil.createDateTextBox('', item, null, null, null, function(value) {
            result['start_date'] = toIsoDate(value.value);
            dialog.setOkButtonEnable(true);
        }, false);

        var row = domConstruct.create("div", {
            'style': 'with: 100%; height: 30px;',
            'class': 'horizontal-flex'
        });
        mainContent.appendChild(row);

        var item = domConstruct.create("div", {
            'style': 'width: 50%; height: 100%; justify-content: flex-end;',
            'class': 'horizontal-flex',
            'innerHTML': 'End Date:'
        });
        row.appendChild(item);

        item = domConstruct.create("div", {
            'style': 'width: 50%; height: 100%; justify-content: flex-start; padding-left: 10px;',
            'class': 'horizontal-flex'
        });
        row.appendChild(item);
        FormUtil.createDateTextBox('', item, Date.now() + 24 * 60 * 60 * 1000, null, null, function(value) {
            result['end_date'] = toIsoDate(value.value);
            dialog.setOkButtonEnable(true);
        }, false);
    });

    dialog.setOkButtonEnable(true);

}, function () {
    callback(result);
}, "OK");



function toIsoDate(date){
    return new Intl.DateTimeFormat('en', { year: 'numeric' }).format(date)
         + '-' + new Intl.DateTimeFormat('en', { month: '2-digit' }).format(date)
         + '-' + new Intl.DateTimeFormat('en', { day: '2-digit' }).format(date);
}
]]>
        </CodeText>
      </Function>
      <Function name="stopModelDialog" args="deployment,modelType,callback" private="false">
        <CodeText>
          <![CDATA[var styleNode = document.createElement('style');
styleNode.type = "text/css";
styleNode.textContent = 
    ".appDialog:last-of-type .appDialogContent table{ display : flex; flex-direction : column; }" +
    ".appDialog:last-of-type .appDialogContent table tr{ display : flex; flex-direction : row-reverse; padding : 2px 0 2px 0} " +
    ".appDialog:last-of-type .appDialogContent table td{ flex : 0 0 0; padding-right : 2px }" +
    ".appDialog:last-of-type .appDialogContent table td:nth-of-type(1){ flex : 1 1 0; padding-right : 0px }" +
    ".appDialog:last-of-type .subOptionLabel, .appDialog:last-of-type .subOptionValue{ position : relative; left : calc( 1em + 2px ) }"
document.head.appendChild(styleNode);

prompt(
    "Deployment " + deployment + ": Stop " + modelType,
    "Do you want to stop " + modelType + " of deployment " + deployment + "?",
    [
    ],
    [
        {label: "Stop", value: true, "class": "saveButton"},
        {label: "Cancel", value: false},
    ],
    {
        width: "500px",
        "container" : {
            "background-color" : "white",
        },
        "form-label" : {
            "width" : "10%",
            "white-space" : "nowrap",
        },
        "form-value" : {
            "width" : "90%",
        },
    },
    function(value, info) {
        try{
            if (value) {
                callback(info);
            }
        }finally{
            document.head.removeChild(styleNode);
        }
    }
);
]]>
        </CodeText>
      </Function>
      <Function name="warnReferenceProjects" args="refPrjs" private="false">
        <CodeText>
          <![CDATA[var self = this;
if(refPrjs.length > 0){
    self.messageDialog("warn", "Project", content(refPrjs), function(value){ });
}

function content(refPrjs){
    return refPrjs[0].prjName
        + (refPrjs.length == 1 ? " is " : " and " + (refPrjs.length - 1) + " projects are ")
        + " using this project's anomaly model";
}]]>
        </CodeText>
      </Function>
    </Functions>
    <Services>
      <Service name="__generateParserModel" args="project,deployment,schema,derive,pivot,enrich,output,uri" private="true">
        <CodeText>
          <![CDATA[var debug = true;

var self = this;
var defaultProfile = this.generateParserDefaultProfile(project, deployment.name);

var defaultGlobalMap = {};
defaultProfile.common.global.forEach(function (item) {
    defaultGlobalMap[item.id] = item;
});

var defaultSparkMap = {};
defaultProfile.common.spark.forEach(function (item) {
    defaultSparkMap[item.id] = item;
});

var deploymentGlobalMap = {};
deployment.parserProfile.common["Parser Properties"].forEach(function (item) {
    deploymentGlobalMap[item.id] = item;
});


var outputTypeSchema = [];
this.___getNormalizeOutputSchema(output).forEach(function(field) {
    outputTypeSchema.push({
        name        : field.name,
        label       : field.label,
        type        : field.type,
        clazz       : field.clazz,
        _isArray    : field.isArray,
        _isOptional : field.isOptional,
    });
});
var pivotTypeSchema = [];
this.___getPivotOutputSchema(pivot).forEach(function(field) {
    pivotTypeSchema.push({
        name        : field.name,
        type        : field.type,
        _isArray    : field.isArray,
        _isOptional : field.isOptional,
    });
});
var deriveFieldsSchema = [];
this.__getDeriveFieldsOutputSchema(derive).forEach(function(field) {
    deriveFieldsSchema.push({
        name        : field.name,
        type        : field.type,
        _isArray    : field.isArray,
        _isOptional : field.isOptional,
    });
});

var enrichDeriveSchema = [];
this.__getEnrichDeriveOutputSchema(schema, enrich).forEach(function(field) {
    enrichDeriveSchema.push({
        name        : field.name,
        type        : field.type,
        _isArray    : field.isArray,
        _isOptional : field.isOptional,
    });
});

var flowTypes = [
    {
        "name"      : "Enrichment",
        "namespace" : "",
        "schema"    : enrichDeriveSchema
    },
    {
        "name"      : "DerivedField",
        "namespace" : "",
        "schema"    : deriveFieldsSchema
    },
    {
		"name"      : "Output",
		"namespace" : "",
		"schema"    : outputTypeSchema,
    },
    {
		"name"      : "Pivot",
		"namespace" : "",
		"schema"    : pivotTypeSchema,
    }
];

var aggregate = project.aggregateWindow || {};
var parserContext = {
    pipeId: "Main",
    newName: deploymentGlobalMap['parser_model_name'].value || deploymentGlobalMap['parser_model_name'].defaultValue,
    space: deploymentGlobalMap['parser_model_space'].value || deploymentGlobalMap['parser_model_space'].defaultValue,
    types: flowTypes,
    properties: {},
    blocks: {}
};

//enrich the global properties
deployment.parserProfile.common["Parser Properties"].forEach(function (item) {
    parserContext.properties[item.id] = item.defaultValue;
});
parserContext.properties["pre_process"] = project.sample.type == "application/json" ? "true" : "false";
parserContext.properties["enrich"] = this._hasEnrichment(enrich) ? "true" : "false";
parserContext.properties["source_group"] =  defaultGlobalMap["source_group"].defaultValue;
parserContext.properties["source_group_prefix"] = defaultGlobalMap["source_group_prefix"].defaultValue;
parserContext.properties["anomaly_file_url"] = defaultGlobalMap["anomaly_file_url"].defaultValue;
parserContext.properties["anomaly_file_name_prefix"] = defaultGlobalMap["anomaly_file_name_prefix"].defaultValue;

if (aggregate && aggregate.aggregate) {
    parserContext.properties["aggregation"] = "true";
} else {
    parserContext.properties["aggregation"] = "false";
}

if (project.sample.type == "application/json") {
    parserContext.properties["isSkipFirstLine"] = {
        "hidden":"true"
    };
}

//if (project.timezone) {
//    parserContext.properties["time_zone"] = project.timezone;
//}

//Source block
if (deployment.datasourceProfile.type == "hdfs") {
    parserContext.properties["kafka_urls"] = {
        "hidden":"true"
    };
    parserContext.properties["kafka_topics"] = {
        "hidden":"true"
    };
    parserContext.properties["file_url"] = deployment.datasourceProfile.config.path;
    parserContext.properties["file_filter"] = deployment.datasourceProfile.config.filter;
    parserContext.blocks.Source = {
        properties: {
            filter: deployment.datasourceProfile.config.filter,
            sample: this.___getSampleText(project, 5)
        }
    };
} else if (deployment.datasourceProfile.type == "kafka") {
    parserContext.properties["file_url"] = {
        "hidden":"true"
    };
    parserContext.properties["file_filter"]= {
        "hidden":"true"
    };
    parserContext.properties["kafka_urls"] = deployment.datasourceProfile.config.servers;
    parserContext.properties["kafka_topics"] = deployment.datasourceProfile.config.topics;
    
    parserContext.blocks.Source = {
        subflowConfig: {
            "subflow": "remote:///viaops.ingestion/KafkaSource",
            bindingConfig: [{
                label: "Stop After n Microbatch"
            },{
                label: "Source Group"
            },{
                label: "Source Group Prefix"
            },{
                label: "Kafka Bootstrap Servers"
            },{
                label: "Kafka Topics"
            },{
                label: "Max Batch Size (Number)"
            },{
                label: "Start Date"
            },{
                label: "End Date"
            },{
                label: "Audit Log"
            },{
                label: "Audit Log Table"
            }]
        }
    };
}

//Pre Process block
if (project.sample.type == "application/json") {
    var scriptText0 = Context.getLocalResource("JSON_SCRIPT_0").trim();
    var scriptText = this.getPreScript(project).trim();
    var scriptText1 = Context.getLocalResource("JSON_SCRIPT_1").trim();
    parserContext.blocks["Pre Process"] = {
        properties: {
            script: scriptText0+"\n"+scriptText+"\n"+scriptText1
        }
    };
    
    if (project.sample.jsonEncoding == "FILE") {
        parserContext.codes = {
            Spark: Context.getLocalResource("JSON_FILE_SPARK_PROPERTIES")
        };
    }
}

//Parse block
parserContext.blocks["Parse CSV"] = {
    outputs: [{
        index: 0,
        outputSchema: this.___getParseSchema(schema, pivot, true)
    }],
    properties: {
        delimiterType: "csv",
        delimiter: "",
        schema: this.___getParseSchema(schema, pivot, false),
        daylight: project.dst == true
    }
};

if (project.timezone) {
    parserContext.blocks["Parse CSV"].properties["timezone"] = project.timezone;
}

if (project.delimiterType) {
    parserContext.blocks["Parse CSV"].properties["delimiterType"] = project.delimiterType;
    
    if (project.delimiterType == "userDef") {
        parserContext.blocks["Parse CSV"].properties["delimiter"] = project.delimiter;
    }
}

if (this._hasEnrichment(enrich)) {
    var enrichmentTable = JSON.parse(project.enrichTable);
    enrichmentTable.info = project.enrichTable;
    enrichmentTable.defaultSchema = project.enrichDatabase;
    enrichmentTable.schema = project.enrichDatabase;
    
    var enrichDatasource = JSON.parse(project.enrichSource);
    parserContext.properties["enrich_datasource"] = {
        dataSource: enrichDatasource.jndiName,
        driverType: enrichDatasource["class"]
    };
    parserContext.properties["databaseList"] = project.enrichDatabase;
    parserContext.properties["tableList"] = enrichmentTable.name;
    
    //Reference block
    var enrichmentOutputSchema = this.___getEnrichmentOutputSchema(enrich);
    var enrichmentColumns = enrichmentOutputSchema.map(function (item) {
        item["isOptional"] = true;
        return item.column; 
    });
    parserContext.blocks.Reference = {
        properties: {
            table: enrichmentTable,
            dataSource: JSON.parse(project.enrichSource),
            columns: enrichmentColumns,
            schema: enrichmentOutputSchema,
            filter: project.enrichFilterScript || ""
        },
        outputs: [{
            index: 0,
            outputSchema: enrichmentOutputSchema
        }]
    };
    
    //Enrich
    var enrichProjectionsEditor = this.___getEnrichProjections(pivot, enrich, schema);
    var enrichProjections = [];
    enrichProjectionsEditor.forEach(function(field) {
        if (!field.exclude) {
            enrichProjections.push({
                source : field.source,
                name   : field.name,
                label  : field.name,
            });
        }
    });
    
    var enrichPredicates = self.___getEnrichPredicates(enrich);
    var joinType = (project.enrichJoinType == null || project.enrichJoinType == "" ? "LeftOuterJoin" : project.enrichJoinType);
    parserContext.blocks.Enrich = {
        properties: {
            joinType: joinType,
            predicates: enrichPredicates,
            projectionsEditor: enrichProjectionsEditor,
            projections: enrichProjections
        }
    };
    
    //PrepareDeriveEnrich
    var computes =  this.__getEnrichDeriveComputeModel(schema, enrich);
    parserContext.blocks["PrepareDeriveEnrich"] = {
        properties: {
            computes: computes
        }
    };
    
    //PrepareDerive
    computes = this.__getNoEnrichDeriveComputeModel(schema);
    parserContext.blocks["PrepareDerive"] = {
        properties: {
            computes: computes
        }
    };
} else {
    parserContext.properties["enrich_datasource"] = {
        "hidden":"true"
    };
    parserContext.properties["databaseList"] = {
        "hidden":"true"
    };
    parserContext.properties["tableList"] = {
        "hidden":"true"
    };
    
    //PrepareDerive
    var computes =  this.__getEnrichDeriveComputeModel(schema, enrich);
    parserContext.blocks["PrepareDerive"] = {
        properties: {
            computes: computes
        }
    };
    
    //PrepareDeriveEnrich
    parserContext.blocks["PrepareDeriveEnrich"] = {
        properties: {
            computes: computes
        }
    };
}

//DerivedFields block
parserContext.blocks.DerivedFields = {
    properties: {
        variables: this.__getDerivedFieldsVariablesModel(project, derive),
        computes: this.__getDerivedFieldsComputeModel(project, derive)
    }
};

//Pivot block
parserContext.blocks.Pivot = {
    properties: {
        "script": this.___generatePivotCode(derive, pivot)
    }
};

//aggregate
var aggrDimensionList = pivotTypeSchema.map(function (item) {
    return item.name;
}).filter(function (item) {
    return  item != "ts" && item != "pivotTypeSchema" && item != "metric_value";
});

parserContext.blocks.Aggregate = {
    "properties": {
        "timeSetting": {
            "timeSettingValue": {
                "timeType":"event",
                "eventField":"ts",
                "hbChecked": aggregate.hbDelaySize > 0,
                "oooChecked": aggregate.OOOSize > 0,
                "hbStopEmpty": aggregate.stopEmptyWindow,
                "hbDelay": aggregate.hbDelaySize + "/" + aggregate.hbDelayUnit,
                "oooDelay": aggregate.OOOSize + "/" + aggregate.OOOUnit
            }
        },
        "windowSetting": {
            "windowSize": aggregate.windowSize + "/" + aggregate.windowUnit,
            "windowInterval": aggregate.windowSize + "/" + aggregate.windowUnit,
            "windowPolicy":"time"
        },
        "dimensions": aggrDimensionList
    }
};

//Choose Aggregation
var computes = this.__getAggregateComputeModel(project, pivot);
parserContext.blocks["Choose Aggregation"] = {
    properties: {
        computes: computes
    }
};

//Normalize
var computes =  this.___getNormalizeComputeModel(output);
parserContext.blocks.Normalize = {
    properties: {
        computes: computes
    }
};

var restURL = uri + "?op=customizeTemplate&format=json&vttoken=" + Context.getToken();
var RestRequest = com.vitria.m3oui.rest.core.RestRequest;
var result = (new RestRequest(restURL, {
    customizeParam: JSON.stringify(parserContext)
}, 1)).send();

if (debug) {
    print("generateDeploymentParserModel:" + result);
    var EnvLib = com.vitria.fc.utils.EnvLib;
    var File = java.io.File;
    var path = EnvLib.expandVars("${VTBA_HOME}/tmp/" + Context.getCurrentUserId() + "/" + parserContext.newName + "/parserContext.json");
    Context.writeToFile(path, JSON.stringify(parserContext));
}

return true;


]]>
        </CodeText>
      </Service>
      <Service name="__getAggregateComputeModel" args="project,pivot" private="true">
        <CodeText>
          <![CDATA[var pivotSchema = [];
var metricValueType = 'double';
this.___getPivotOutputSchema(pivot).forEach(function(field) {
    pivotSchema.push({
        name        : field.name,
        type        : field.type,
        _isArray    : field.isArray,
        _isOptional : field.isOptional,
    });
    
    if (field.name == "metric_value") {
        metricValueType = field.type;
    }
});

var metricList = this.___getMetricList(pivot);
var metricValueSle = [];
var metricValueSleEnd = [];
var metricValueAggrMap = {
    "sum": "sum_metric_value",
    "avg": "avg_metric_value",
    "count": "count",
    "min": "min_metric_value",
    "max": "max_metric_value"
};
metricList.forEach(function (metric) {
    metricValueSleEnd.push(")");
    if (metric.aggr == "avg" && metricValueType != "double") {
        metricValueSle.push('if (metric_name = "' + metric.name + '", cast(' + metricValueAggrMap[metric.aggr] + ', "' + metricValueType + '")');
    } else {
        metricValueSle.push('if (metric_name = "' + metric.name + '",' + metricValueAggrMap[metric.aggr]);
    }
});
metricValueSle.push("sum_metric_value");
var computeModel = [];
for (var i=0, n=pivotSchema.length; i<n; i++) {
    var item = pivotSchema[i];
    
    var compute = null;
    switch(item.name) {
        case "ts":
            compute = {
                op         : "sleText",
                field      : "*",
                arg        : "",
                value      : "from_unixtime_millisec(window_start_time)",
                outputType : item.type,
                alias      : item.name,
                wordWarp   : true,
            };
            break;
        case "metric_value":
            compute = {
                op         : "sleText",
                field      : "*",
                arg        : "",
                value      : metricValueSle.join(",") + metricValueSleEnd.join(""),
                outputType : item.type,
                alias      : item.name,
                wordWarp   : true,
            };
            break;
        default:
            compute = {
                op         : "sleText",
                field      : "*",
                arg        : "",
                value      : item.name,
                outputType : item.type,
                alias      : item.name,
                wordWarp   : true,
            };
        break;
    }
    computeModel.push(compute);
}
return computeModel;]]>
        </CodeText>
      </Service>
      <Service name="__getDerivedFieldsComputeModel" args="project,schema" private="true">
        <CodeText>
          <![CDATA[var computeModel = schema.map(function(item) {
    return  {
        op         : "sleText",
        field      : "*",
        arg        : "",
        value      : item.expr,
        outputType : item.data_type,
        alias      : item.name,
        wordWarp   : true
    };
});
return computeModel;]]>
        </CodeText>
      </Service>
      <Service name="__getDerivedFieldsVariablesModel" args="project,schema" private="true">
        <CodeText>
          <![CDATA[var computeModel = schema.map(function(item) {
    return  {
        value      : item.expr,
        outputType : item.data_type,
        alias      : item.name
    };
});
return computeModel;]]>
        </CodeText>
      </Service>
      <Service name="__getDeriveFieldsOutputSchema" args="schema" private="true">
        <CodeText>
          <![CDATA[var outputSchema = [];
for (var i=0, n=schema.length; i<n; i++) {
    var item = schema[i];
    outputSchema.push({
        name        : item.name,
        label       : item.label || item.name,
        type        : item.data_type,
        isArray     : false,
        isOptional  : item.optional,
        clazz       : "",
        isDimension : item.attr_type == "dimension" || this._isDimension(item.data_type),
        isMeasure   : item.attr_type == "measure" || this._isMeasure(item.data_type),
    });
}
return outputSchema;]]>
        </CodeText>
      </Service>
      <Service name="__getEnrichDeriveComputeModel" args="schema,enrich" private="true">
        <CodeText>
          <![CDATA[var outputSchema = [];
for (var i=0, n=schema.length; i<n; i++) {
    var item = schema[i];
    if (item.ignore == true) continue;
    
    outputSchema.push({
        op         : "sleText",
        field      : "*",
        arg        : "",
        value      : item.name,
        outputType : item.data_type,
        alias      : item.name,
        wordWarp   : true
    });
}

if (this._hasEnrichment(enrich)) {
    enrich.joinClause.forEach(function (item) {
        if (item.include != true) return;
        outputSchema.push({
            op         : "sleText",
            field      : "*",
            arg        : "",
            value      : item.rightField,
            outputType : item.type,
            alias      : item.rightField,
            wordWarp   : true
        })
    });
}

return outputSchema;
]]>
        </CodeText>
      </Service>
      <Service name="__getEnrichDeriveOutputSchema" args="schema,enrich" private="true">
        <CodeText>
          <![CDATA[var outputSchema = [];
for (var i=0, n=schema.length; i<n; i++) {
    var item = schema[i];
    if (item.ignore == true) continue;
    
    outputSchema.push({
        name        : item.name,
        label       : item.label || item.name,
        type        : item.data_type,
        isArray     : false,
        isOptional  : item.optional,
        clazz       : "",
        isDimension : item.attr_type == "dimension" || this._isDimension(item.data_type),
        isMeasure   : item.attr_type == "measure" || this._isMeasure(item.data_type)
    });
}

var self = this;
if (this._hasEnrichment(enrich)) {
    enrich.joinClause.forEach(function (item) {
        if (item.include != true) return;
        outputSchema.push({
            name: item.rightField,
            label: item.rightField,
            type: item.type,
            isArray     : false,
            isOptional  : false,
            clazz       : "",
            isDimension : self._isDimension(item.type),
            isMeasure   : self._isMeasure(item.type)
        })
    });
}

return outputSchema;

]]>
        </CodeText>
      </Service>
      <Service name="__getNoEnrichDeriveComputeModel" args="schema" private="true">
        <CodeText>
          <![CDATA[var outputSchema = [];
for (var i=0, n=schema.length; i<n; i++) {
    var item = schema[i];
    if (item.ignore == true) continue;
    
    outputSchema.push({
        op         : "sleText",
        field      : "*",
        arg        : "",
        value      : item.name,
        outputType : item.data_type,
        alias      : item.name,
        wordWarp   : true
    });
}
return outputSchema;]]>
        </CodeText>
      </Service>
      <Service name="_deleteDeploymentModelInfo" args="project,deployment" private="true">
        <CodeText>
          <![CDATA[if (typeof deployment == "string") {
    deployment = this.loadProjectDeployment(project, deployment);
}

var queryConfig = this.getQueryConfig();
var DS = queryConfig['data-source']['storage-model'] || 'viaops_runtime_db';
var sql = Context.getLocalResource("MODEL_INFO_SELECT_SQL");

sql = this._doValueSubstitution(sql, {
    uuid: project.uuid,
    name: deployment.name
});
var result = this.executeSQLQuery(queryConfig, [], ["Signal Onboarding", "Model Info Item", "Select"], DS, sql, null);
if (result != null && result.items != null && result.items.length > 0) {
    var item = result.items[0];
    
    //handle ds model
    var existModel = item["datasource_model"];
    if (this._mrHasModel(existModel)) {
        this._mrDeleteModel(existModel);
    }

    
    //handle system model
    var existModel = item["system_model"];
    if (this._mrHasModel(existModel)) {
        this._mrDeleteModel(existModel);
    }
    
    //handle ingestion model
    var existModel = item["ingestion_model"];
    if (this._mrHasModel(existModel)) {
        this._mrDeleteModel(existModel);
    }
    
    //handle anomaly model
    var existModel = item["anomaly_model"];
    if (this._mrHasModel(existModel)) {
        this._mrDeleteModel(existModel);
    }

    sql = Context.getLocalResource("MODEL_INFO_DELETE_SQL");
    this.executeSQLUpdate(queryConfig, [], ["Signal Onboarding", "Model Info Item", "Delete"], DS, sql, [[project.uuid, deployment.name]]);
}]]>
        </CodeText>
      </Service>
      <Service name="_deleteProjectDeployment" args="project,name" private="true">
        <CodeText>
          <![CDATA[var queryConfig = this.getQueryConfig();
var DS = queryConfig['data-source']['storage-model'] || 'viaops_runtime_db';
var sql = Context.getLocalResource("PROJECT_DEPLOYMENT_DELETE_SQL");
this.executeSQLUpdate(queryConfig, [], ["Signal Onboarding", "Deployment Item", "Delete"], DS, sql, [[project.uuid, name]]);
print("_deleteProjectDeployment: deleted="+project.uuid + "/" + name);
return true;
]]>
        </CodeText>
      </Service>
      <Service name="_getDebugAuditParserDroppedTable" args="project" private="true">
        <CodeText>
          <![CDATA[return ("so_" + project.safePrefix + "_debug_audit_parser_dropped").replace(/[\W_]+/g, " ").replace(/\s+/g, "_");]]>
        </CodeText>
      </Service>
      <Service name="_getDebugAuditParserTable" args="project" private="true">
        <CodeText>
          <![CDATA[return ("so_" + project.safePrefix + "_debug_audit_parser").replace(/[\W_]+/g, " ").replace(/\s+/g, "_");]]>
        </CodeText>
      </Service>
      <Service name="_loadProjectDeployment" args="project,name,decode" private="true">
        <CodeText>
          <![CDATA[//print("_loadProjectDeployment: project="+__prettyPrintJSON(project));
//print("_loadProjectDeployment: name="+name);

var queryConfig = this.getQueryConfig();
var DS = queryConfig['data-source']['storage-model'] || 'viaops_runtime_db';
var sql = Context.getLocalResource("PROJECT_DEPLOYMENT_SELECT_SQL");
sql = this._doValueSubstitution(sql, {
    uuid: project.uuid,
    name: name
});
var result = this.executeSQLQuery(queryConfig, [], ["Signal Onboarding", "Deployment Item", "Select"], DS, sql, null);
if (result != null && result.items != null && result.items.length > 0) {
    var data = result.items[0].value;
    if (decode) data = JSON.parse(data);
    
    return data;
}
return null;]]>
        </CodeText>
      </Service>
      <Service name="_loadProjectDeploymentList" args="project,decode" private="true">
        <CodeText>
          <![CDATA[//print("_loadProjectDeploymentList: project="+__prettyPrintJSON(project));
if (!project) return [];

var queryConfig = this.getQueryConfig();
var DS = queryConfig['data-source']['storage-model'] || 'viaops_runtime_db';
var sql = Context.getLocalResource("PROJECT_DEPLOYMENT_SELECT_ALL_SQL");
sql = this._doValueSubstitution(sql, {
    uuid: project.uuid
});
var result = this.executeSQLQuery(queryConfig, [], ["Signal Onboarding", "Deployment List", "Select"], DS, sql, null);
if (result != null && result.items != null) {
    var items = result.items
    if (decode) {
        items.forEach(function (item) {
            item.value = JSON.parse(item.value);
        });
    }

    return items;
}
return [];]]>
        </CodeText>
      </Service>
      <Service name="_saveProjectDeployment" args="project,name,data,encode" private="true">
        <CodeText>
          <![CDATA[//print("_saveProjectDeployment: project="+__prettyPrintJSON(project));
//print("_saveProjectDeployment: name"+name);
//print("_saveProjectDeployment: data"+__prettyPrintJSON(data));

if (encode) {
    data = JSON.stringify(data);
}

var queryConfig = this.getQueryConfig();
var DS = queryConfig['data-source']['storage-model'] || 'viaops_runtime_db';
var sql = Context.getLocalResource("PROJECT_DEPLOYMENT_EXIST_SQL");
sql = this._doValueSubstitution(sql, {
    uuid: project.uuid,
    name: name
});
var result = this.executeSQLQuery(queryConfig, [], ["Signal Onboarding", "Deployment Item", "Exist"], DS, sql, null);
if (result != null && result.items != null && result.items.length > 0) {
    sql = Context.getLocalResource("PROJECT_DEPLOYMENT_UPDATE_SQL");
    this.executeSQLUpdate(queryConfig, [], ["Signal Onboarding", "Deployment Item", "Update"], DS, sql, [[data, project.uuid, name]]);
} else {
    sql = Context.getLocalResource("PROJECT_DEPLOYMENT_INSERT_SQL");
    this.executeSQLUpdate(queryConfig, [], ["Signal Onboarding", "Deployment Item", "Insert"], DS, sql, [[project.uuid, name, data]]);
}
return true;]]>
        </CodeText>
      </Service>
      <Service name="_toDateString" args="date" private="true">
        <CodeText>
          <![CDATA[  var mm = date.getMonth() + 1; // getMonth() is zero-based
  var dd = date.getDate();

  return [date.getFullYear(),
          (mm>9 ? '' : '0') + mm,
          (dd>9 ? '' : '0') + dd
         ].join('-');]]>
        </CodeText>
      </Service>
      <Service name="_updateSystemModelLastModified" args="" private="false">
        <CodeText>
          <![CDATA[return this._saveProjectFile({uuid: "__signal_onboarding__"}, "system-model-last-modified", (new Date()).getTime(), false);]]>
        </CodeText>
      </Service>
      <Service name="afterGenerateDeploymentModels" args="project,deployment,options" private="false">
        <CodeText>
          <![CDATA[if (typeof deployment == "string") {
    deployment = this.loadProjectDeployment(project, deployment);
}

var queryConfig = this.getQueryConfig();

var defaultProfile = this.generateParserDefaultProfile(project, deployment.name);
var defaultGlobalMap = {};
defaultProfile.common.global.forEach(function (item) {
    defaultGlobalMap[item.id] = item;
});

var ingestionModel = "/app/spark/user/" + Context.getCurrentUserId() + "/sparkm/" + this.getParserModelName(project, deployment);
var deploymentGlobalMap = {};
deployment.parserProfile.common["Parser Properties"].forEach(function (item) {
    deploymentGlobalMap[item.id] = item;
});

var defaultValues = this._getDefaultValues();
var hdfsServerURL = project.hdfsServerURL;
var sourcePath = deployment.datasourceProfile.config.path.substring(hdfsServerURL.length);
var sparkSqlTablePath = (deploymentGlobalMap["spark_sql_table_url"].defaultValue).substring(project.hdfsServerURL.length);
var sparkSqlTable = deploymentGlobalMap["spark_sql_table"].defaultValue;
var anomalyFileUrl = defaultGlobalMap["anomaly_file_url"].defaultValue;
var anomalyFilePath = anomalyFileUrl.substring(hdfsServerURL.length);

var outputNames = [];
if (project.detail && project.detail.output) {
    project.detail.output.forEach(function(item){
        outputNames.push(item["name"]);
    });
}
var outputNameList = outputNames.join(",");
var DS = queryConfig['data-source']['storage-model'] || 'viaops_runtime_db';
var sql = Context.getLocalResource("MODEL_INFO_SELECT_SQL");
sql = this._doValueSubstitution(sql, {
    uuid: project.uuid,
    name: deployment.name
});


var modelContext = {
    sourceGroup: defaultGlobalMap["source_group"].defaultValue,
    targetGroup: defaultGlobalMap["spark_sql_table"].defaultValue,
    prefix: project.prefix,
    safePrefix: project.safePrefix,
    anomalyFilePrefix: defaultGlobalMap["anomaly_file_name_prefix"].defaultValue,
    anomalyFileUrl: defaultGlobalMap["anomaly_file_url"].defaultValue,
    datasourceProfile: deployment.datasourceProfile
};

var enrichmentTable = null;
var enrichDatasource = null;
var enrich = this.loadProjectEnrich(project);
if (this._hasEnrichment(enrich)) {
    enrichmentTable = JSON.parse(project.enrichTable);
    enrichDatasource = JSON.parse(project.enrichSource);
    modelContext.enrichTable = enrichmentTable;
    modelContext.enrichSource = enrichDatasource;
    modelContext.enrichDatabase = project.enrichDatabase;
}

var ingestionModelContext = null;
if (options.updateParserModel) {
    ingestionModelContext = JSON.stringify(modelContext);
}

var result = this.executeSQLQuery(queryConfig, [], ["Signal Onboarding", "Model Info Select", "Select"], DS, sql, null);
if (result != null && result.items != null && result.items.length > 0) {
    if (!ingestionModelContext) {
        ingestionModelContext = result.items[0]["ingestion_model_context"];
    }
    
    sql = Context.getLocalResource("MODEL_INFO_UPDATE_SQL");
    this.executeSQLUpdate(queryConfig, [], ["Signal Onboarding", "Model Info", "Update"], DS, sql, [[ingestionModel, hdfsServerURL, sourcePath, sparkSqlTablePath, sparkSqlTable, anomalyFilePath, "", outputNameList,  ingestionModelContext, project.uuid, deployment.name]]);
} else {
    sql = Context.getLocalResource("MODEL_INFO_INSERT_SQL");
    this.executeSQLUpdate(queryConfig, [], ["Signal Onboarding", "Model Info", "Update"], DS, sql, [[project.uuid, deployment.name, ingestionModel, hdfsServerURL, sourcePath, sparkSqlTablePath, sparkSqlTable, anomalyFilePath, "", outputNameList, ingestionModelContext]]);
}]]>
        </CodeText>
      </Service>
      <Service name="debugParserModelWithProfile" args="project,deployment,instance,profile" private="false">
        <CodeText>
          <![CDATA[if (typeof deployment == "string") {
    deployment = this.loadProjectDeployment(project, deployment);
}

var uri = this.getParserModelURL(project, deployment);
if (this._mrHasModel(uri)) {
    if (this._isRunning(uri, instance)) {
        print("debugParserModel: " + uri + " is already debug");
        return "ACTIVE";
    }
    else {
        var value = this._doStart(uri, profile, true);
        if (typeof value == 'string') {
            print("debugParserModel: " + uri + "=" + value);
            this._notifyStatusChange(project, deployment, 'Debug Ingestion');
            return this._getMappedStatus(value);
        } else {
            return value;
        }
    }
}
else {
    print("debugParserModel: " + uri + " not found");
    return "NOT_FOUND";
}
]]>
        </CodeText>
      </Service>
      <Service name="deleteProjectDeployment" args="project,deployment" private="false">
        <CodeText>
          <![CDATA[var EnvLib = com.vitria.fc.utils.EnvLib;
var File = java.io.File;

if (typeof deployment == "string") {
    deployment = this.loadProjectDeployment(project, deployment);
}

var uri = this.getResourceModelURL(project, deployment);
if (this._mrHasModel(uri)) {
    this._mrDeleteModel(uri);
}

this.resetParserModel(project, deployment);


var parserModelName = this.getParserModelName(project, deployment);
var path = EnvLib.expandVars("${VTBA_HOME}/tmp/" + Context.getCurrentUserId() + "/" + parserModelName + "/parserContext.json");
var file = new File(path);
if (file.exists()) {
    file.delete();
    
    path = EnvLib.expandVars("${VTBA_HOME}/tmp/" + Context.getCurrentUserId() + "/" + parserModelName);
    file = new File(path);
    file.delete();
}


this._deleteDeploymentModelInfo(project, deployment);
return this._deleteProjectDeployment(project, deployment.name);]]>
        </CodeText>
      </Service>
      <Service name="fetchHDFSSampleFile" args="project,path" private="false">
        <CodeText>
          <![CDATA[function endWith (str, search) {
	return str.substring(str.length - search.length, str.length) == search;
}

var LocalFileUtil = com.vitria.dbp.resource.utils.helper.LocalFileUtil;

var fs = HDFS.getFileSystem(path);
var subPath = path;
if (path.startsWith("hdfs://") && path.length() > 7) {
	subPath = path.substring(path.indexOf('/', 7));
}

var list = HDFS.listFiles(fs, subPath, true, false);
if( list != null && list.length > 0){
    list.sort(function (itemA, itamB) {
        var timeA = (new Date(itemA.modified)).getTime();
        var timeB = (new Date(itemB.modified)).getTime();
        return timeB = timeA;
    });

    var file = list[0];
    var fileData = {
        name: file.name,
        size: file.size
    };
    
    if (endWith(file.name, 'csv')) {
        fileData.type = "text/csv";
    } else if (endWith(file.name, "json")) {
        fileData.type = "application/json";
    }
    
    fileData.content = HDFS.readFile(fs, subPath + "/" + file.name);
    HDFS.closeFileSystem(path, fs);
    
    return this.addSampleData(project, fileData);
    
} else {
    HDFS.closeFileSystem(path, fs);
    return {
        error  : "Sample file not found.",
    };
}


]]>
        </CodeText>
      </Service>
      <Service name="generateDatasourceDefaultProfile" args="project,name" private="false">
        <CodeText>
          <![CDATA[var defaultValues = this._getDefaultValues();
var nameDefaults = this.getNameDefaults(project);
var queryConfig = this.getQueryConfig();

var namePrefix = (project.safePrefix || nameDefaults.namePrefix);
var sourceGroup = namePrefix;
var targetGroup = namePrefix;
var metricTablePath = "";
if (project.metricModel) {
    targetGroup = project.metricModel.table_name;
    if (project.metricModel.dataResource) {
        metricTablePath = project.metricModel.dataResource.hdfsURL;
    }
}

var filter = "*.*";
if (project.filenameExtension == null || project.filenameExtension.trim() == "") {
    // if no extension, use complete wildcard match
    filter = ".*";
}
else {
    if (project.filenameFilter == null || project.filenameFilter.trim() == "") {
        // if no filter/suffix, use wildcard match on leading name + extension
        filter = ".*\\." + project.filenameExtension;
    }
    else {
        var temp = project.filenameFilter;
        temp = temp.replace(/[\=\!\$\-\(\)\+\^\.\{\}\[\]]/g, "\\$&");
        filter = ".*_" + temp + "\\." + project.filenameExtension;
    }
};

return {
    type: "hdfs",
    config: {
        path: project.hdfsServerURL + defaultValues["source-path"] + "so_" + sourceGroup + "_source",
        filter: filter
    }
};]]>
        </CodeText>
      </Service>
      <Service name="generateDeploymentDefaultValues" args="project,name" private="false">
        <CodeText>
          <![CDATA[var deployment = {
    name: name
};

var sparkProperties =  ["spark.executor.memory", "spark.cores.max", "spark.executor.instances", "spark.executor.cores", "spark.master"];
var parserProperties = ["isSkipFirstLine", "parser_model_space", "parser_model_name", "resource_model_name", "system_model_name", "max_batch_size", "start_date", "end_date", "data_source", "ref_table", 
    "spark_sql_table_url", "spark_sql_table", "agg_dropped_events", "agg_dropped_events", "enableAudit", "auditUrl"];

var enrich = this.loadProjectEnrich(project);
if (this._hasEnrichment(enrich)) {
    parserProperties = ["enrich_datasource", "tableList"].concat(parserProperties);
}

deployment.parserProfile = this.generateParserDefaultProfile(project, name);
deployment.datasourceProfile = this.generateDatasourceDefaultProfile(project, name);

deployment.parserProfile.common["Parser Properties"] = deployment.parserProfile.common.global.filter(function (item) {
    return parserProperties.indexOf(item.id) >= 0;
});
delete deployment.parserProfile.common.global;

deployment.parserProfile.common["RT Spark Properties"] = deployment.parserProfile.common.spark.filter(function (item) {
   return  sparkProperties.indexOf(item.id) >= 0;
});
delete deployment.parserProfile.common.spark;

deployment.parserProfile.common["Service Spark Properties"] = JSON.parse(JSON.stringify(deployment.parserProfile.common["RT Spark Properties"]));

return deployment;]]>
        </CodeText>
      </Service>
      <Service name="generateParserDefaultProfile" args="project,name" private="false">
        <CodeText>
          <![CDATA[var defaultValues = this._getDefaultValues();
var nameDefaults = this.getNameDefaults(project);
var queryConfig = this.getQueryConfig();

var namePrefix = (project.safePrefix || nameDefaults.namePrefix);
var sourceGroup = namePrefix;
var targetGroup = namePrefix;
var metricTablePath = "";
if (project.metricModel) {
    targetGroup = project.metricModel.table_name;
    if (project.metricModel.dataResource) {
        metricTablePath = project.metricModel.dataResource.hdfsURL;
    }
}

if(!metricTablePath){
    metricTablePath = project.hdfsServerURL + defaultValues["target-path"] + targetGroup;
}


var defaultProfile = JSON.parse(Context.getLocalResource("PARSER_PROFILE_TEMPLATE"));
var sparkAppVariables = this.loadSparkAppVariables();

var anomalyFilePrefix = namePrefix.toLowerCase();
var anomalyFileUrl = project.hdfsServerURL + defaultValues["anomaly-path"] + targetGroup;

var sparkProfileMap = {};
defaultProfile.common.spark.forEach(function (item) {
    sparkProfileMap[item.id] = item;
    if (item.id == 'checkpoint') {
        item.defaultValue = sparkAppVariables['spark.checkpoint'].value;
        item.defaultLabel = sparkAppVariables['spark.checkpoint'].value + " (inherited)";
    } else if (sparkAppVariables[item.id]) {
        item.defaultValue = sparkAppVariables[item.id].value;
        item.defaultLabel = sparkAppVariables[item.id].value + " (inherited)";
    }
});

for (var pro in sparkAppVariables) {
    if (!sparkProfileMap[pro]) {
        defaultProfile.common.spark.push({
            id: pro,
            label: sparkAppVariables[pro].label,
            type: sparkAppVariables[pro].type,
            defaultValue: sparkAppVariables[pro].value
        });
    }
}

var enrichmentTable = null;
var enrichDatasource = null;
var enrich = this.loadProjectEnrich(project);
if (this._hasEnrichment(enrich)) {
    enrichmentTable = JSON.parse(project.enrichTable);
    enrichDatasource = JSON.parse(project.enrichSource);
}

defaultProfile.common.global.forEach(function (item) {
    switch (item.id) {
        case "parser_model_space":
            item.defaultValue = project.space;
            break;
        case "parser_model_name":
            item.defaultValue = "SO_" + namePrefix.toUpperCase() + "_" + name +  "_PARSER";
            break;
        case "source_group":
            item.defaultValue = sourceGroup;
            break;
        case "source_group_prefix":
            item.defaultValue = namePrefix.toLowerCase();
            break;
        case "time_zone":
            item.defaultValue = project.timezone;
            break;
        case "file_url":
            item.defaultValue = project.hdfsServerURL + defaultValues["source-path"] + "so_" + sourceGroup + "_source";
            break;
        case "file_filter":
            if (project.filenameExtension == null || project.filenameExtension.trim() == "") {
                // if no extension, use complete wildcard match
                item.defaultValue = ".*";
            }
            else {
                if (project.filenameFilter == null || project.filenameFilter.trim() == "") {
                    // if no filter/suffix, use wildcard match on leading name + extension
                    item.defaultValue = ".*\\." + project.filenameExtension;
                }
                else {
                    item.defaultValue = ".*_" + project.filenameFilter + "\\." + project.filenameExtension;
                }
            }
            break;
        case "data_source":
            item.defaultValue.dataSource = "/vitria/m3o/datasource/DefaultDomain/" + queryConfig["data-source"]["reference-data"];
            break;
        case "spark_sql_table_url":
            item.defaultValue = metricTablePath;
            break;
        case "spark_sql_table":
            item.defaultValue = targetGroup;
            break;
        case "anomaly_file_name_prefix":
            item.defaultValue = namePrefix.toLowerCase();
            break;
        case "anomaly_file_url":
            item.defaultValue =  project.hdfsServerURL + defaultValues["anomaly-path"] + targetGroup;
            break;
        case "enrich_datasource":
            if (enrichDatasource) {
                item.defaultValue ={ 
                    dataSource: enrichDatasource.jndiName,
                    driverType: enrichDatasource["class"]
                };
            } else {
                item.defautValue = null;
            }
            break;
        case "databaseList":
            if (project.enrichDatabase) {
                item.defaultValue = project.enrichDatabase;
            } else {
                item.defautValue = "";
            }
            break;
        case "tableList":
            if (enrichmentTable) {
                item.defaultValue = enrichmentTable.name;
            } else {
                item.defautValue = "";
            }
            break;
    }
});

return defaultProfile;]]>
        </CodeText>
      </Service>
      <Service name="getADFTimezoneList" args="" private="false">
        <CodeText>
          <![CDATA[var XmlUtil = com.vitria.util.XmlUtil;
var XQueryLib = com.vitria.xquery.XQueryLib;

var timezones = Context.GET("/rest/global/?op=get.timezones");
var document = XQueryLib.parseXML(timezones);
var rootNode = document.getDocumentElement();
var nodeList = XQueryLib.getFromXPath(rootNode, "Record");

var result = [];
for (var i = 0; i < nodeList.length; i++) {
    var node = nodeList[i];
    var valueNode = XQueryLib.getFirstFromXPath(node, "value");
    var value = Context.getNodeText(valueNode);
    
    var labelNode = XQueryLib.getFirstFromXPath(node, "label");
    var label = Context.getNodeText(labelNode);
    
    result.push({
        value: value,
        label: label
    });
}
return result;
]]>
        </CodeText>
      </Service>
      <Service name="getDeriveSleSchema" args="schema" private="false">
        <CodeText>
          <![CDATA[if (!schema) schema = [];

var result = {};
result.properties = JSON.parse(Context.getLocalResource("PARSER_MODEL_GLOBAL_PROPERTIES"));

var sleSchema = [];
for (var i = 0, n = schema.length; i < n; i++) {
    var item = schema[i];
    sleSchema.push({
        name        : item.name,
        label       : item.name,
        type        : item.data_type || "string",
        isArray     : false,
        isOptional  : item.optional != null ? item.optional : false,
        clazz       : "",
        isDimension : false,
        isMeasure   : false
    });
}
result.schema = sleSchema;

return result;
]]>
        </CodeText>
      </Service>
      <Service name="getOutputSleSchema" args="pivot" private="false">
        <CodeText>
          <![CDATA[var result = {};

result.schema = this.___getLookupOutputSchema(pivot);
result.properties = JSON.parse(Context.getLocalResource("PARSER_MODEL_GLOBAL_PROPERTIES"));

return result;]]>
        </CodeText>
      </Service>
      <Service name="getParserDebugDropedEvents" args="project,deployment" private="false">
        <CodeText>
          <![CDATA[if (typeof deployment == "string") {
    deployment = this.loadProjectDeployment(project, deployment);
}

var queryConfig = this.getQueryConfig();
var nameDefaults = this.getNameDefaults(project);
var namePrefix = (project.safePrefix || nameDefaults.namePrefix);
var sourceGroup = namePrefix;

var DATASOURCE = queryConfig["data-source"]["parser-audit"];
var auditParserDroppedTable =  this._getDebugAuditParserDroppedTable(project);
var sql = "select error, count(1) as count from " + auditParserDroppedTable + " group by error" ;

var result = this.executeSQLQuery(queryConfig, [], [], DATASOURCE, sql, null, false, Date.now());
if (result != null && result.items != null) {
    return result.items;
} else {
    return [];
}

]]>
        </CodeText>
      </Service>
      <Service name="getParserDebugOutputEvents" args="project,deployment" private="false">
        <CodeText>
          <![CDATA[if (typeof deployment == "string") {
    deployment = this.loadProjectDeployment(project, deployment);
}

var modelPath = this.getParserModelURL(project, deployment);
var url = "/rest"+modelPath+"?op=inspectOutput&instance=Debug&format=json";
var headers = {
    "request": JSON.stringify([{
        "nodeId": "fab3627f-d1c5-4d10-8a96-0a435dd85f0d",
        "timeRange": -1,
        "lastBucket": 0,
        "lastBucketWithData": 5,
        "limit": 1500
    }])
};
var result = Context.POST(url, headers);
result = JSON.parse(result);

var items = [];
result.forEach(function (item) {
    if (item && item.data) {
        if (Array.isArray(item.data)) {
            item.data.forEach(function (data) {
                if (data.items) {
                    items = items.concat(data.items);
                }
            })
        } else if (item.data.items) {
            items = items.concat(item.data.items); 
        }
    }
});
return items;

]]>
        </CodeText>
      </Service>
      <Service name="getParserDebugOutputSumamry" args="project,deployment" private="false">
        <CodeText>
          <![CDATA[if (typeof deployment == "string") {
    deployment = this.loadProjectDeployment(project, deployment);
}

var queryConfig = this.getQueryConfig();
var nameDefaults = this.getNameDefaults(project);
var namePrefix = (project.safePrefix || nameDefaults.namePrefix);
var sourceGroup = namePrefix;

var DATASOURCE = queryConfig["data-source"]["parser-audit"];
var auditParserTable = this._getDebugAuditParserTable(project);
var sql = Context.getLocalResource("AUDIT_PARSER_DEBUG_SELECT_SQL");
var sql = this._doValueSubstitution(sql, {
    sourceGroup : sourceGroup,
    auditParserTable: auditParserTable
});
var result = this.executeSQLQuery(queryConfig, [], [], DATASOURCE, sql, null, false, Date.now());
if (result != null && result.items != null) {
    return result.items;
} else {
    return [];
}]]>
        </CodeText>
      </Service>
      <Service name="getParserProfile" args="project,deployment,instance,customConfig" private="false">
        <CodeText>
          <![CDATA[var defaultProfile = this.generateParserDefaultProfile(project, deployment.name);
defaultProfile["instance.identifier"] = instance;

var defaultGlobalMap = {};
defaultProfile.common.global.forEach(function (item) {
    defaultGlobalMap[item.id] = item;
});

var defaultSparkMap = {};
defaultProfile.common.spark.forEach(function (item) {
    defaultSparkMap[item.id] = item;
});


deployment.parserProfile.common["Parser Properties"].forEach(function (item) {
    if (item.value != null) {
        defaultGlobalMap[item.id].value = item.value;
    }
});

if (deployment.datasourceProfile.type == "hdfs") {
    defaultGlobalMap["file_url"].value = deployment.datasourceProfile.config.path;
    defaultGlobalMap["file_filter"].value = deployment.datasourceProfile.config.filter;
} else if (deployment.datasourceProfile.type == "kafka") {
    defaultGlobalMap["kafka_urls"].value = deployment.datasourceProfile.config.servers;
    defaultGlobalMap["kafka_topics"].value = deployment.datasourceProfile.config.topics;
}


for (var pro in customConfig) {
    if (defaultGlobalMap[pro]) {
        defaultGlobalMap[pro].value = customConfig[pro];
    }
}

var sparkField = instance == "RT" ? "RT Spark Properties" : "Service Spark Properties";
deployment.parserProfile.common[sparkField].forEach(function (item) {
    if (item.value != null) {
        if(defaultSparkMap[item.id]) {
            defaultSparkMap[item.id].value = item.value;
        } else {
            defaultProfile.common.spark.push(JSON.parse(JSON.stringify(item)));
        }
    }
});

return defaultProfile;

]]>
        </CodeText>
      </Service>
      <Service name="getProjectRuntimeStatuses" args="project" private="false">
        <CodeText>
          <![CDATA[var deployments = this.loadProjectDeploymentList(project);

var result = [];
var self = this;
deployments.forEach(function (deployment) {
    result.push(self.getRuntimeStatus(project, deployment.value));
});
return result;]]>
        </CodeText>
      </Service>
      <Service name="getRuntimeParserProfile" args="project,deployment,instance" private="false">
        <CodeText>
          <![CDATA[if (typeof deployment == "string") {
    deployment = this.loadProjectDeployment(project, deployment);
}

var deploymentSparkMap = {};
var sparkField = instance == "RT" ? "RT Spark Properties" : "Service Spark Properties";
deployment.parserProfile.common[sparkField].forEach(function (item) {
    deploymentSparkMap[item.id] = item;
});

var enrich = this.loadProjectEnrich(project);
var hasEnrich = this._hasEnrichment(enrich);
var enrichFields = ["enrich_datasource", "databaseList", "tableList"];

var profile = getParserProfile(project, deployment, instance);
var ignoreItems = ["parser_model_space", "parser_model_name", "resource_model_name", "system_model_name"];
if (project.sample.type == "application/json") {
    ignoreItems.push("isSkipFirstLine");
}
profile.common.global = profile.common.global.filter(function (item) {
    if (deployment.datasourceProfile.type == "kafka") {
        if (item.id == "file_url" || item.id == "file_filter") {
            return false;
        }
    } else {
        if (item.id == "kafka_urls" || item.id == "kafka_topics") {
            return false;
        }
    }
    
    if (enrichFields.indexOf(item.id) >= 0 && !hasEnrich) {
        return false;
    }
    
    if (ignoreItems.indexOf(item.id) >= 0) {
        return false;
    }
    
    return true;
});

profile.common.spark.forEach(function (item) {
    if (deploymentSparkMap[item.id] != null) {
        item.__deployment__ = true;
    }
});

var queryConfig = this.getQueryConfig();
var DS = queryConfig['data-source']['storage-model'] || 'viaops_runtime_db';
var sql = Context.getLocalResource("MODEL_INFO_SELECT_SQL");
sql = this._doValueSubstitution(sql, {
    uuid: project.uuid,
    name: deployment.name
});

var result = this.executeSQLQuery(queryConfig, [], ["Signal Onboarding", "Model Info Select", "Select"], DS, sql, null);
if (result != null && result.items != null && result.items.length > 0) {
    var modelContext = result.items[0]["ingestion_model_context"];
    if (modelContext != null && modelContext != "") {
        var parserContext = JSON.parse(modelContext);
        profile.common.global.forEach(function (item) {
            switch (item.id) {
                case "source_group":
                    if (item.defaultValue != parserContext.sourceGroup) {
                        item.value = item.defaultValue;
                        item.defaultValue = parserContext.sourceGroup;
                    }
                    break;
                case "anomaly_file_url":
                    if (item.defaultValue != parserContext.anomalyFileUrl) {
                        item.value = item.defaultValue;
                        item.defaultValue = parserContext.anomalyFileUrl;
                    }
                    break;
                case "file_url":
                    if (item.defaultValue != parserContext.datasourceProfile.config.path) {
                        item.value = item.defaultValue;
                        item.defaultValue = parserContext.datasourceProfile.config.path;
                    }
                    break;
                case "file_filter":
                    if (item.defaultValue != parserContext.datasourceProfile.config.filter) {
                        item.value = item.defaultValue;
                        item.defaultValue = parserContext.datasourceProfile.config.filter;
                    }
                    break;
                case "kafka_urls":
                    if (item.defaultValue != parserContext.datasourceProfile.config.servers) {
                        item.value = item.defaultValue;
                        item.defaultValue = parserContext.datasourceProfile.config.servers;
                    }
                    break;
                case "kafka_topics":
                    if (item.defaultValue != parserContext.datasourceProfile.config.topics) {
                        item.value = item.defaultValue;
                        item.defaultValue = parserContext.datasourceProfile.config.topics;
                    }
                    break;
                case "spark_sql_table_url":
                    item.value = item.defaultValue;
                    break;
                case "spark_sql_table":
                    item.value = item.defaultValue;
                    break;
                default:
                    break;
            }
        });
    }
}

return profile;]]>
        </CodeText>
      </Service>
      <Service name="importProjectDeployment" args="project,name,deployment" private="false">
        <CodeText>
          <![CDATA[var migrateContent = this.migrateDeployment(project, deployContent());

var defaultValues = this._getDefaultValues();
var sparkAppVariables = this.loadSparkAppVariables();

if (migrateContent.datasourceProfile.type == "hdfs") {
    migrateContent.datasourceProfile.config.path = defaultValues["hdfs-server-url"] + migrateContent.datasourceProfile.config.path.substring(project.hdfsServerURL.length);
}

migrateContent.parserProfile.common["Parser Properties"].forEach(function (item) {
    switch (item.id) {
        case "file_url":
            item.defaultValue = defaultValues["hdfs-server-url"] + item.defaultValue.substring(project.hdfsServerURL.length);
            break;
        case "spark_sql_table_url":
            item.defaultValue = defaultValues["hdfs-server-url"] + item.defaultValue.substring(project.hdfsServerURL.length);
            break;
        case "anomaly_file_url":
            item.defaultValue = defaultValues["hdfs-server-url"] + item.defaultValue.substring(project.hdfsServerURL.length);
            break;
    }
});

migrateContent.parserProfile.common["Service Spark Properties"].forEach(function (item) {
    switch (item.id) {
        case "spark.master":
            item.defaultValue = sparkAppVariables[item.id].value;
            item.defaultLabel = sparkAppVariables[item.id].value + " (inherited)";
            break;
    }
});

migrateContent.parserProfile.common["RT Spark Properties"].forEach(function (item) {
    switch (item.id) {
        case "spark.master":
            item.defaultValue = sparkAppVariables[item.id].value;
            item.defaultLabel = sparkAppVariables[item.id].value + " (inherited)";
            break;
    }
});

if(this._saveProjectDeployment(project, name, migrateContent, true)) return migrateContent;

function deployContent(){
    return typeof deployment === 'string' ? JSON.parse(deployment) : deployment;
}]]>
        </CodeText>
      </Service>
      <Service name="listProjectPickerList" args="" private="false">
        <CodeText>
          <![CDATA[var queryConfig = this.getQueryConfig();

var projects = [];
var DS = queryConfig['data-source']['storage-model'] || 'viaops_runtime_db';
var sql = Context.getLocalResource("PROJECT_TABLE_SELECT_SQL");
var result = this.executeSQLQuery(queryConfig, [], ["Signal Onboarding", "Project", "Select"], DS, sql, null);
var self = this;
if (result != null && result.items != null) {
    result.items.forEach(function (item) {
        projects.push({
            uuid: item.uuid,
            prjName: item['prj_name'],
        });
    });
}
return projects;
]]>
        </CodeText>
      </Service>
      <Service name="listReferenceProjects" args="project" private="false">
        <CodeText>
          <![CDATA[var output = this.loadProjectOutput(project);
this._updateProjectOutputHash(project, output);


var queryConfig = this.getQueryConfig();
var projects = [];
var DS = queryConfig['data-source']['storage-model'] || 'viaops_runtime_db';
var sql = "select * from viaops_signal_onboarding_project where (anomaly_type is null || anomaly_type = 'own-anomaly') and output_hash = '" + project.outputHash + "' and uuid != '" + project.uuid + "'";
var result = this.executeSQLQuery(queryConfig, [], ["Signal Onboarding", "Project", "Select"], DS, sql, null);
var self = this;
if (result != null && result.items != null) {
    result.items.forEach(function (item) {
        item.prjName = item.prjName;
        var project = item;
        if (project.prjName == null) project.prjName = project.svc + "|" + project.comp + "|" + project.app;

        projects.push({
            uuid: project.uuid,
            prjName: project.prjName
        });
    });
}
return projects;]]>
        </CodeText>
      </Service>
      <Service name="loadProjectByName" args="name" private="false">
        <CodeText>
          <![CDATA[var queryConfig = this.getQueryConfig();
var project = null;
var DS = queryConfig['data-source']['storage-model'] || 'viaops_runtime_db';
var sql = "select * from viaops_signal_onboarding_project where prj_name = '" + name + "'";
var result = this.executeSQLQuery(queryConfig, [], ["Signal Onboarding", "Project", "Select"], DS, sql, null);
var self = this;
if (result != null && result.items != null && result.items.length > 0) {
    var item = result.items[0];
    project = self._loadProjectFile(item, 'project.json', true);
    if (project.prjName == null) project.prjName = project.svc + "|" + project.comp + "|" + project.app; 
    project.uuid = item.uuid;
    self._initProject(project);
    self.migrateSOproject(project);
}
return project;]]>
        </CodeText>
      </Service>
      <Service name="loadProjectByUUID" args="uuid" private="false">
        <CodeText>
          <![CDATA[var queryConfig = this.getQueryConfig();

var project = null;
var DS = queryConfig['data-source']['storage-model'] || 'viaops_runtime_db';
var sql = "select * from viaops_signal_onboarding_project_v2  where uuid = '" + uuid + "'";
var result = this.executeSQLQuery(queryConfig, [], ["Signal Onboarding", "Project", "Select"], DS, sql, null);
var self = this;
if (result != null && result.items != null && result.items.length > 0) {
    var item = result.items[0];
    var project = self._loadProjectFile(item, 'project.json', true);
    
    project.uuid = item.uuid;
    self._initProject(project);
    self.migrateSOproject(project);
}
return project;
]]>
        </CodeText>
      </Service>
      <Service name="loadProjectDeployment" args="project,name" private="false">
        <CodeText>
          <![CDATA[return _loadProjectDeployment(project, name, true);
]]>
        </CodeText>
      </Service>
      <Service name="loadProjectDeploymentList" args="project" private="false">
        <CodeText>
          <![CDATA[return this._loadProjectDeploymentList(project, true);]]>
        </CodeText>
      </Service>
      <Service name="migrateDeployment" args="project,deployment" private="false">
        <CodeText>
          <![CDATA[var defaultDeployment = this.generateDeploymentDefaultValues(project, 'Default');
var result = JSON.parse(JSON.stringify(deployment));
result.parserProfile.common = generateGroups(defaultDeployment.parserProfile.common, deployment.parserProfile.common);
migrateDates(result, toDateString.bind(this));
return result;

function generateGroups(defaultGroups, originGroups){
    return Object.keys(defaultGroups).reduce(generateGroup, {});
    
    function generateGroup(newGroups, groupName){
        newGroups[groupName] = generateProps(defaultGroups[groupName], originGroups[groupName]);
        return newGroups;
    }
    
    function generateProps(defaultProps, originProps){
        return defaultProps.map(resolvePropValue)
        .concat(originProps.filter(customProp));
        
        function resolvePropValue(propValue){
            return originProps.filter(sameId.bind(this, propValue))[0] || propValue;
        }
        
        function sameId(propValue, originProp){
            return propValue.id === originProp.id && !originProp.custom;
        }
        
        function customProp(prop){
            return prop.custom;
        }
    }
}

function migrateDates(deployment, toDateString){
    migrateDate(deployment.parserProfile.common['Parser Properties'], 'start_date');
    migrateDate(deployment.parserProfile.common['Parser Properties'], 'end_date');
    return deployment;
    
    function migrateDate(props, dateId){
        if(dateValue() && errorFormat())
            dateProp().value = toDateString(dateValue());
        
        function sameId(prop){
            return prop.id === dateId;
        }
        
        function errorFormat(){
            return !/^\d{4}-\d{2}-\d{2}$/.test(dateValue());
        }
        
        function dateProp(){
            return props.filter(sameId)[0] || {};
        }
        
        function dateValue(){
            return dateProp().value;
        }
    }
}

function toDateString(value){
    return this._toDateString(new Date(value));
}]]>
        </CodeText>
      </Service>
      <Service name="migrateSOproject" args="project" private="false">
        <CodeText>
          <![CDATA[var nameDefaults = this.getNameDefaults(project);
var namePrefix = (project.safePrefix || nameDefaults.namePrefix);]]>
        </CodeText>
      </Service>
      <Service name="preGenerateDeploymentModels" args="project,deployment,options" private="false">
        <CodeText>
          <![CDATA[if (!options) {
    options = {
        updateParserModel: true,
        resetParserSource: false,
        resetParserTarget: false,
        purgeParserModel: false,
    };
}

if (typeof deployment == "string") {
    deployment = this.loadProjectDeployment(project, deployment);
}

var queryConfig = this.getQueryConfig();
var DS = queryConfig['data-source']['storage-model'] || 'viaops_runtime_db';
var sql = Context.getLocalResource("MODEL_INFO_SELECT_SQL");

sql = this._doValueSubstitution(sql, {
    uuid: project.uuid,
    name: deployment.name
});
var result = this.executeSQLQuery(queryConfig, [], ["Signal Onboarding", "Model Info Item", "Select"], DS, sql, null);
if (result != null && result.items != null && result.items.length > 0) {
    var item = result.items[0];
    //handle hive table and hdfs directory
    var defaultValues = this._getDefaultValues();
    
    var deploymentGlobalMap = {};
    deployment.parserProfile.common["Parser Properties"].forEach(function (item) {
        deploymentGlobalMap[item.id] = item;
    });
    
    //handle ingestion model
    var existModel = item["ingestion_model"];
    var newModel = "/app/spark/user/" + Context.getCurrentUserId() + "/sparkm/" + this.getParserModelName(project, deployment);
    if (options.updateParserModel) {
        if (existModel != newModel && this._mrHasModel(existModel)) {
            this._mrDeleteModel(existModel);
        }
    }
}
]]>
        </CodeText>
      </Service>
      <Service name="purgeParserModel" args="project,deployment,instance,purgeRuntime,purgeCheckpoint,purgeInput,purgeOutput" private="false">
        <CodeText>
          <![CDATA[if (typeof deployment == "string") {
    deployment = this.loadProjectDeployment(project, deployment);
}

if(purgeInput) this._purgeInput(project, deployment);
if(purgeOutput) this._purgeOutput(project, deployment);

var uri = this.getParserModelURL(project, deployment);
return this._doPurge(uri, instance, purgeRuntime, purgeCheckpoint);]]>
        </CodeText>
      </Service>
      <Service name="saveProjectDeployment" args="project,deployment,name" private="false">
        <CodeText>
          <![CDATA[return this._saveProjectDeployment(project, name, deployment, true);]]>
        </CodeText>
      </Service>
      <Service name="saveProjectWithDeployments" args="project,deployments" private="false">
        <CodeText>
          <![CDATA[this._updateSafePrefix(project);
this.saveProjectModel(project);

var self = this;
if (!deployments) return true;

for (var i = 0; i < deployments.length; i++) {
    this.saveProjectDeployment(project, deployments[i], deployments[i].name);
}

return true;]]>
        </CodeText>
      </Service>
      <Service name="startParserModelWithProfile" args="project,deployment,instance,profile" private="false">
        <CodeText>
          <![CDATA[if (typeof deployment == "string") {
    deployment = this.loadProjectDeployment(project, deployment);
}

var uri = this.getParserModelURL(project, deployment);
if (this._mrHasModel(uri)) {
    if (this._isRunning(uri, instance)) {
        print("startParserModel: " + uri + " is already running");
        return "ACTIVE";
    }
    else {
        var value = this._doStart(uri, profile);
        if (typeof value == 'string') {
            print("startParserModel: " + uri + "=" + value);
            this._notifyStatusChange(project, deployment, 'Continuous Ingestion');
            return this._getMappedStatus(value);
        } else {
            return value;
        }
    }
}
else {
    print("startParserModel: " + uri + " not found");
    return "NOT_FOUND";
}
]]>
        </CodeText>
      </Service>
      <Service name="startServiceParserModelWithProfile" args="project,deployment,instance,profile" private="false">
        <CodeText>
          <![CDATA[if (typeof deployment == "string") {
    deployment = this.loadProjectDeployment(project, deployment);
}

var uri = this.getParserModelURL(project, deployment);
if (this._mrHasModel(uri)) {
    if (this._isRunning(uri, instance)) {
        print("startParserModel: " + uri + " is already running");
        return "ACTIVE";
    }
    else {
        var profile = this.getParserProfile(project, deployment, instance, customConfig);
        var value = this._doStart(uri, profile);
        
        if (typeof value == 'string') {
            print("startParserModel: " + uri + "=" + value);
            this._notifyStatusChange(project, deployment, 'Custom Ingestion');
            return this._getMappedStatus(value);
        } else {
            return value;
        }
    }
}
else {
    print("startParserModel: " + uri + " not found");
    return "NOT_FOUND";
}
]]>
        </CodeText>
      </Service>
      <Service name="updateProjectAndDeploymentDefaultValues" args="project,enrich" private="false">
        <CodeText>
          <![CDATA[function updateUrlPrefix(fullPath, prefix) {
    var subPath = fullPath.substring(fullPath.indexOf("/", "hdfs://".length));
    return prefix + subPath;
}

if (!enrich) {
    enrich = this.loadProjectEnrich(project);
}
var hasEnrich = this._hasEnrichment(enrich);
var enrichmentTable = null;
var enrichDatasource = null;
if (hasEnrich) {
    enrichmentTable = JSON.parse(project.enrichTable);
    enrichDatasource = JSON.parse(project.enrichSource);
}

var self = this;
if (project.__prjname_changed__ == true || project.__hdfs_changed__ == true || project.__filter_changed__ == true ||
    project.__space_changed__ == true || project.__enrich_changed__ == true || project.__metric_model_changed__ == true) {
    project.anomalyFileUrl = updateUrlPrefix(project.anomalyFileUrl, project.hdfsServerURL);
    
    var deploymentList = this.loadProjectDeploymentList(project);
    deploymentList.forEach(function (deployment) {
        deployment = deployment.value;
        
        var tempDeployment = this.generateDeploymentDefaultValues(project, deployment.name);
        var parserGlobalMap = {};
        tempDeployment.parserProfile.common["Parser Properties"].forEach(function (item) {
            parserGlobalMap[item.id] = item;
        });
    
        if (deployment.datasourceProfile && deployment.datasourceProfile.config.path) {
            deployment.datasourceProfile.config.path = updateUrlPrefix(deployment.datasourceProfile.config.path, project.hdfsServerURL);
        }
        
        if (project.__filter_changed__ == true && deployment.datasourceProfile.type == "hdfs") {
            deployment.datasourceProfile.config.filter = tempDeployment.datasourceProfile.config.filter;
        }
        
        var parserProfileMap = {};
        //var ignoreFields = ["parser_model_name", "resource_model_name", "system_model_name"];
        deployment.parserProfile.common["Parser Properties"].forEach(function (item) {
            //if (ignoreFields.indexOf(item.id) >= 0) return;
            
            parserProfileMap[item.id] = true;
            if (parserGlobalMap[item.id]) {
                item.defaultValue = parserGlobalMap[item.id].defaultValue;
            }
        });
        
        var enrichFields = ["enrich_datasource", "databaseList", "tableList"];
        if (!hasEnrich) {
            deployment.parserProfile.common["Parser Properties"] = deployment.parserProfile.common["Parser Properties"].filter(function (item) {
                return enrichFields.indexOf(item.id) < 0;
            });
        } else {
            if (!parserProfileMap['enrich_datasource'] && parserGlobalMap["enrich_datasource"]) {
                deployment.parserProfile.common["Parser Properties"].push(parserGlobalMap["enrich_datasource"]);
            }
            
            if (!parserProfileMap['tableList'] && parserGlobalMap["tableList"]) {
                deployment.parserProfile.common["Parser Properties"].push(parserGlobalMap["tableList"]);
            }
        }
        
        if (project.sample != null && project.sample.type == "application/json") {
            deployment.parserProfile.common["Parser Properties"] = deployment.parserProfile.common["Parser Properties"].filter(function (item) {
                return item.id != "isSkipFirstLine";
            });
        } else {
            if (!parserProfileMap['isSkipFirstLine'] && parserGlobalMap["isSkipFirstLine"]) {
                var index = deployment.parserProfile.common["Parser Properties"].indexOf(parserProfileMap["file_filter"]);
                if (index >= 0) {
                    deployment.parserProfile.common["Parser Properties"].splice(index + 1, 0, parserGlobalMap["isSkipFirstLine"]);
                }
            }
        }
        
        self.saveProjectDeployment(project, deployment, deployment.name);
    });
    
    project.__hdfs_changed__ = false;
    project.__space_changed__  = false;
    project.__prjname_changed__ = false;
    project.__filter_changed__ = false;
    project.__enrich_changed__ = false;
    project.__metric_model_changed__ = true;
}

]]>
        </CodeText>
      </Service>
    </Services>
    <Resources>
      <Resource uuid="be5de59d-d65f-417c-89c0-1e2303ad4358" name="AUDIT_PARSER_DEBUG_SELECT_SQL" type="application/sql" size="237" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="655686c5-bdcb-44fd-8bca-df0623f9f58b" name="MODEL_INFO_DELETE_ALL_SQL" type="application/sql" size="67" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="2cca2f71-4cf1-49bc-8330-343c7c9e4b06" name="MODEL_INFO_DELETE_SQL" type="application/sql" size="78" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="16dd1df8-0808-4973-8b03-8d6b08306f56" name="MODEL_INFO_EXIST_SQL" type="application/sql" size="101" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="60591d92-2b34-4057-8f05-5ea810f83e49" name="MODEL_INFO_INSERT_SQL" type="application/sql" size="485" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="e5c24e3d-9a0f-484f-83b2-83d8dce76faa" name="MODEL_INFO_RESET_SQL" type="text/plain" size="307" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="2860b18e-ec5c-480e-88cf-c87022040403" name="MODEL_INFO_SELECT_SQL" type="application/sql" size="92" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="d32c3aba-98c8-4d1a-8833-6e87add2ac7a" name="MODEL_INFO_UPDATE_SQL" type="application/sql" size="344" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="3aa76353-4516-4c62-8b5b-a2e9d8a9d32d" name="PARSER_MODEL_GLOBAL_PROPERTIES" type="application/json" size="11849" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="1d55d084-c542-48ed-8cd5-2389ca5e9c27" name="PARSER_PROFILE_TEMPLATE" type="application/json" size="6492" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="aaf24aaa-c64d-42f5-8c17-e081ba2724a0" name="PROJECT_DEPLOYMENT_DELETE_ALL_SQL" type="application/sql" size="75" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="facc7903-2f77-4a06-8d4b-81f1604062c4" name="PROJECT_DEPLOYMENT_DELETE_SQL" type="application/sql" size="86" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="cef7022b-a9e4-42cf-8115-bc8c630a79d7" name="PROJECT_DEPLOYMENT_EXIST_SQL" type="application/sql" size="109" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="c353528a-5cdf-46dc-8a74-b66bf089000c" name="PROJECT_DEPLOYMENT_INSERT_SQL" type="application/sql" size="265" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="2fba8ab4-7375-4196-801e-d93977f52d89" name="PROJECT_DEPLOYMENT_SELECT_ALL_SQL" type="application/sql" size="81" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="fa9ae1b5-e617-4d90-8587-25326ed2a81a" name="PROJECT_DEPLOYMENT_SELECT_SQL" type="application/sql" size="100" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
      <Resource uuid="1d7e4f3d-4046-4641-80b9-41db7a029d15" name="PROJECT_DEPLOYMENT_UPDATE_SQL" type="application/sql" size="130" private="false">
        <Description>
          <![CDATA[]]>
        </Description>
      </Resource>
    </Resources>
    <Plugins>
    </Plugins>
  </ModelInfo>
</DashboardPluginModel>