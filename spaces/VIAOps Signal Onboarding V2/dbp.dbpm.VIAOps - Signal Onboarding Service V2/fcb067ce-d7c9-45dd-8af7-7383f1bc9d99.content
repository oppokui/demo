};
var toCsvLine = function(arr) {
    var buf = [];
    for (var j=0, jN=arr.length; j<jN; j++) {
        var val = arr[j];
        if (val != null) {
            if (typeof val == "string") {
                buf.push('"'+val+'"');
            }
            else {
                buf.push(String(val));
            }
        }
        else {
            buf.push("");
        }
    }
    return buf.join(",");
};
var convert = function(jsonText) {
    var retval = mapJSONtoCSV(jsonText, true);
    if (retval != null && retval.type == "text/csv" && retval.cols != null && retval.data != null) {
        var csv = [];
        for (var j=0, jN=retval.data.length; j<jN; j++) {
            csv.push(toCsvLine(retval.data[j]));
        }
        return csv.join("\n");
    }
    return null;
};
""".stripMargin)

    val inv = engine.asInstanceOf[Invocable]
    def convert(inv: Invocable, json: String): (Boolean, String) = {
        try {
            val csv = inv.invokeFunction("convert", json).asInstanceOf[String]
            (true, csv)
        } catch {
            case ex: javax.script.ScriptException => (false, json)
        }
    }
    
    // call function from script file
    lines.map(line => convert(inv, line))
    // inv.invokeFunction("convert", line).asInstanceOf[String]

})

val normal = retvalBase.filter(_._1).map(_._2).flatMap((event) => event.split("\n"))
val dropped = retvalBase.filter(! _._1).map(_._2).flatMap((event) => event.split("\n"))
val retval = (normal, dropped)
